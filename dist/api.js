"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.94.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayFrequencyValue = exports.OverrideAccountType = exports.ModelErrorErrorTypeEnum = exports.LoanAccountSubtype = exports.LinkTokenCreateRequestAuthFlowTypeEnum = exports.ItemUpdateTypeEnum = exports.InvestmentTransactionType = exports.InvestmentTransactionSubtype = exports.InvestmentAccountSubtype = exports.IncomeVerificationSourceType = exports.IncomeVerificationPrecheckConfidence = exports.IncomeVerificationPayrollFlowType = exports.IncomeBreakdownType = exports.IncidentUpdateStatusEnum = exports.IdentityUpdateTypes = exports.EmploymentVerificationStatus = exports.EmailTypeEnum = exports.EarningsBreakdownCanonicalDescription = exports.DocType = exports.DepositoryAccountSubtype = exports.DepositSwitchTargetAccountAccountSubtypeEnum = exports.DepositSwitchGetResponseSwitchMethodEnum = exports.DepositSwitchGetResponseStateEnum = exports.DepositSwitchCreateRequestCountryCodeEnum = exports.DepositSwitchAltCreateRequestCountryCodeEnum = exports.CreditBankIncomeWarningType = exports.CreditBankIncomeWarningCode = exports.CreditBankIncomePayFrequency = exports.CreditBankIncomeErrorType = exports.CreditBankIncomeCategory = exports.CreditBankIncomeAccountType = exports.CreditAccountSubtype = exports.CountryCode = exports.CauseErrorTypeEnum = exports.BankTransferType = exports.BankTransferStatus = exports.BankTransferNetwork = exports.BankTransferEventType = exports.BankTransferEventListDirection = exports.BankTransferEventListBankTransferType = exports.BankTransferDirection = exports.AssetReportTransactionTransactionTypeEnum = exports.AccountType = exports.AccountSubtype = exports.AccountSelectionCardinality = exports.AccountIdentityVerificationStatusEnum = exports.AccountBaseVerificationStatusEnum = exports.AccountAssetsVerificationStatusEnum = exports.APRAprTypeEnum = exports.ACHClass = void 0;
exports.TransferType = exports.TransferSweepStatus = exports.TransferStatus = exports.TransferNetwork = exports.TransferIntentStatus = exports.TransferIntentCreateMode = exports.TransferIntentAuthorizationDecision = exports.TransferEventType = exports.TransferEventListTransferType = exports.TransferAuthorizationGuaranteeDecisionRationaleCode = exports.TransferAuthorizationGuaranteeDecision = exports.TransferAuthorizationDecisionRationaleCode = exports.TransferAuthorizationDecision = exports.TransactionsRuleType = exports.TransactionsRuleField = exports.TransactionStreamStatus = exports.TransactionCode = exports.TransactionBaseTransactionTypeEnum = exports.TransactionAllOfPaymentChannelEnum = exports.TransactionPaymentChannelEnum = exports.TransactionTransactionTypeEnum = exports.TotalCanonicalDescription = exports.StudentRepaymentPlanTypeEnum = exports.StudentLoanStatusTypeEnum = exports.ScopesContext = exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum = exports.SandboxItemFireWebhookRequestWebhookCodeEnum = exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum = exports.RelayEvent = exports.RecurringTransactionFrequency = exports.Products = exports.ProductStatusBreakdownRefreshIntervalEnum = exports.ProductStatusStatusEnum = exports.ProcessorTokenCreateRequestProcessorEnum = exports.PlaidErrorErrorTypeEnum = exports.PhoneNumberTypeEnum = exports.PaystubVerificationStatus = exports.PaystubPayFrequency = exports.PaymentScheme = exports.PaymentScheduleInterval = exports.PaymentInitiationRefundStatus = exports.PaymentInitiationPaymentStatus = exports.PaymentInitiationPaymentCreateStatus = exports.PaymentInitiationConsentStatus = exports.PaymentInitiationConsentScope = exports.PaymentConsentPeriodicInterval = exports.PaymentConsentPeriodicAlignment = exports.PaymentChannel = exports.PaymentAmountCurrency = exports.PayPeriodDetailsPayFrequencyEnum = void 0;
exports.PlaidApi = exports.PlaidApiFactory = exports.PlaidApiFp = exports.PlaidApiAxiosParamCreator = exports.WebhookType = exports.WarningWarningCodeEnum = exports.WalletTransactionStatus = exports.WalletTransactionAmountIsoCurrencyCodeEnum = exports.WalletTransactionTypeEnum = exports.VerificationStatus = exports.VerificationRefreshStatus = exports.VerificationAttributeTypeEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * Specifies the use case of the transfer.  Required for transfers on an ACH network. In Sandbox, only `ccd`, `ppd`, or `web` can be used.  `\"arc\"` - Accounts Receivable Entry  `\"cbr`\" - Cross Border Entry  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"cie\"` - Customer Initiated Entry  `\"cor\"` - Automated Notification of Change  `\"ctx\"` - Corporate Trade Exchange  `\"iat\"` - International  `\"mte\"` - Machine Transfer Entry  `\"pbr\"` - Cross Border Entry  `\"pop\"` - Point-of-Purchase Entry  `\"pos\"` - Point-of-Sale Entry  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"rck\"` - Re-presented Check Entry  `\"tel\"` - Telephone-Initiated Entry  `\"web\"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
 * @export
 * @enum {string}
 */
var ACHClass;
(function (ACHClass) {
    ACHClass["Arc"] = "arc";
    ACHClass["Cbr"] = "cbr";
    ACHClass["Ccd"] = "ccd";
    ACHClass["Cie"] = "cie";
    ACHClass["Cor"] = "cor";
    ACHClass["Ctx"] = "ctx";
    ACHClass["Iat"] = "iat";
    ACHClass["Mte"] = "mte";
    ACHClass["Pbr"] = "pbr";
    ACHClass["Pop"] = "pop";
    ACHClass["Pos"] = "pos";
    ACHClass["Ppd"] = "ppd";
    ACHClass["Rck"] = "rck";
    ACHClass["Tel"] = "tel";
    ACHClass["Web"] = "web";
})(ACHClass = exports.ACHClass || (exports.ACHClass = {}));
/**
    * @export
    * @enum {string}
    */
var APRAprTypeEnum;
(function (APRAprTypeEnum) {
    APRAprTypeEnum["BalanceTransferApr"] = "balance_transfer_apr";
    APRAprTypeEnum["CashApr"] = "cash_apr";
    APRAprTypeEnum["PurchaseApr"] = "purchase_apr";
    APRAprTypeEnum["Special"] = "special";
})(APRAprTypeEnum = exports.APRAprTypeEnum || (exports.APRAprTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AccountAssetsVerificationStatusEnum;
(function (AccountAssetsVerificationStatusEnum) {
    AccountAssetsVerificationStatusEnum["AutomaticallyVerified"] = "automatically_verified";
    AccountAssetsVerificationStatusEnum["PendingAutomaticVerification"] = "pending_automatic_verification";
    AccountAssetsVerificationStatusEnum["PendingManualVerification"] = "pending_manual_verification";
    AccountAssetsVerificationStatusEnum["ManuallyVerified"] = "manually_verified";
    AccountAssetsVerificationStatusEnum["VerificationExpired"] = "verification_expired";
    AccountAssetsVerificationStatusEnum["VerificationFailed"] = "verification_failed";
})(AccountAssetsVerificationStatusEnum = exports.AccountAssetsVerificationStatusEnum || (exports.AccountAssetsVerificationStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AccountBaseVerificationStatusEnum;
(function (AccountBaseVerificationStatusEnum) {
    AccountBaseVerificationStatusEnum["AutomaticallyVerified"] = "automatically_verified";
    AccountBaseVerificationStatusEnum["PendingAutomaticVerification"] = "pending_automatic_verification";
    AccountBaseVerificationStatusEnum["PendingManualVerification"] = "pending_manual_verification";
    AccountBaseVerificationStatusEnum["ManuallyVerified"] = "manually_verified";
    AccountBaseVerificationStatusEnum["VerificationExpired"] = "verification_expired";
    AccountBaseVerificationStatusEnum["VerificationFailed"] = "verification_failed";
})(AccountBaseVerificationStatusEnum = exports.AccountBaseVerificationStatusEnum || (exports.AccountBaseVerificationStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AccountIdentityVerificationStatusEnum;
(function (AccountIdentityVerificationStatusEnum) {
    AccountIdentityVerificationStatusEnum["AutomaticallyVerified"] = "automatically_verified";
    AccountIdentityVerificationStatusEnum["PendingAutomaticVerification"] = "pending_automatic_verification";
    AccountIdentityVerificationStatusEnum["PendingManualVerification"] = "pending_manual_verification";
    AccountIdentityVerificationStatusEnum["ManuallyVerified"] = "manually_verified";
    AccountIdentityVerificationStatusEnum["VerificationExpired"] = "verification_expired";
    AccountIdentityVerificationStatusEnum["VerificationFailed"] = "verification_failed";
})(AccountIdentityVerificationStatusEnum = exports.AccountIdentityVerificationStatusEnum || (exports.AccountIdentityVerificationStatusEnum = {}));
/**
 * The application requires that accounts be limited to a specific cardinality. `MULTI_SELECT`: indicates that the user should be allowed to pick multiple accounts. `SINGLE_SELECT`: indicates that the user should be allowed to pick only a single account. `ALL`: indicates that the user must share all of their accounts and should not be given the opportunity to de-select
 * @export
 * @enum {string}
 */
var AccountSelectionCardinality;
(function (AccountSelectionCardinality) {
    AccountSelectionCardinality["SingleSelect"] = "SINGLE_SELECT";
    AccountSelectionCardinality["MultiSelect"] = "MULTI_SELECT";
    AccountSelectionCardinality["All"] = "ALL";
})(AccountSelectionCardinality = exports.AccountSelectionCardinality || (exports.AccountSelectionCardinality = {}));
/**
 * See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
 * @export
 * @enum {string}
 */
var AccountSubtype;
(function (AccountSubtype) {
    AccountSubtype["_401a"] = "401a";
    AccountSubtype["_401k"] = "401k";
    AccountSubtype["_403B"] = "403B";
    AccountSubtype["_457b"] = "457b";
    AccountSubtype["_529"] = "529";
    AccountSubtype["Brokerage"] = "brokerage";
    AccountSubtype["CashIsa"] = "cash isa";
    AccountSubtype["EducationSavingsAccount"] = "education savings account";
    AccountSubtype["Ebt"] = "ebt";
    AccountSubtype["FixedAnnuity"] = "fixed annuity";
    AccountSubtype["Gic"] = "gic";
    AccountSubtype["HealthReimbursementArrangement"] = "health reimbursement arrangement";
    AccountSubtype["Hsa"] = "hsa";
    AccountSubtype["Isa"] = "isa";
    AccountSubtype["Ira"] = "ira";
    AccountSubtype["Lif"] = "lif";
    AccountSubtype["LifeInsurance"] = "life insurance";
    AccountSubtype["Lira"] = "lira";
    AccountSubtype["Lrif"] = "lrif";
    AccountSubtype["Lrsp"] = "lrsp";
    AccountSubtype["NonTaxableBrokerageAccount"] = "non-taxable brokerage account";
    AccountSubtype["Other"] = "other";
    AccountSubtype["OtherInsurance"] = "other insurance";
    AccountSubtype["OtherAnnuity"] = "other annuity";
    AccountSubtype["Prif"] = "prif";
    AccountSubtype["Rdsp"] = "rdsp";
    AccountSubtype["Resp"] = "resp";
    AccountSubtype["Rlif"] = "rlif";
    AccountSubtype["Rrif"] = "rrif";
    AccountSubtype["Pension"] = "pension";
    AccountSubtype["ProfitSharingPlan"] = "profit sharing plan";
    AccountSubtype["Retirement"] = "retirement";
    AccountSubtype["Roth"] = "roth";
    AccountSubtype["Roth401k"] = "roth 401k";
    AccountSubtype["Rrsp"] = "rrsp";
    AccountSubtype["SepIra"] = "sep ira";
    AccountSubtype["SimpleIra"] = "simple ira";
    AccountSubtype["Sipp"] = "sipp";
    AccountSubtype["StockPlan"] = "stock plan";
    AccountSubtype["ThriftSavingsPlan"] = "thrift savings plan";
    AccountSubtype["Tfsa"] = "tfsa";
    AccountSubtype["Trust"] = "trust";
    AccountSubtype["Ugma"] = "ugma";
    AccountSubtype["Utma"] = "utma";
    AccountSubtype["VariableAnnuity"] = "variable annuity";
    AccountSubtype["CreditCard"] = "credit card";
    AccountSubtype["Paypal"] = "paypal";
    AccountSubtype["Cd"] = "cd";
    AccountSubtype["Checking"] = "checking";
    AccountSubtype["Savings"] = "savings";
    AccountSubtype["MoneyMarket"] = "money market";
    AccountSubtype["Prepaid"] = "prepaid";
    AccountSubtype["Auto"] = "auto";
    AccountSubtype["Business"] = "business";
    AccountSubtype["Commercial"] = "commercial";
    AccountSubtype["Construction"] = "construction";
    AccountSubtype["Consumer"] = "consumer";
    AccountSubtype["HomeEquity"] = "home equity";
    AccountSubtype["Loan"] = "loan";
    AccountSubtype["Mortgage"] = "mortgage";
    AccountSubtype["Overdraft"] = "overdraft";
    AccountSubtype["LineOfCredit"] = "line of credit";
    AccountSubtype["Student"] = "student";
    AccountSubtype["CashManagement"] = "cash management";
    AccountSubtype["Keogh"] = "keogh";
    AccountSubtype["MutualFund"] = "mutual fund";
    AccountSubtype["Recurring"] = "recurring";
    AccountSubtype["Rewards"] = "rewards";
    AccountSubtype["SafeDeposit"] = "safe deposit";
    AccountSubtype["Sarsep"] = "sarsep";
    AccountSubtype["Payroll"] = "payroll";
    AccountSubtype["Null"] = "null";
})(AccountSubtype = exports.AccountSubtype || (exports.AccountSubtype = {}));
/**
 * `investment:` Investment account. In API versions 2018-05-22 and earlier, this type is called `brokerage` instead.  `credit:` Credit card  `depository:` Depository account  `loan:` Loan account  `other:` Non-specified account type  See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
 * @export
 * @enum {string}
 */
var AccountType;
(function (AccountType) {
    AccountType["Investment"] = "investment";
    AccountType["Credit"] = "credit";
    AccountType["Depository"] = "depository";
    AccountType["Loan"] = "loan";
    AccountType["Brokerage"] = "brokerage";
    AccountType["Other"] = "other";
})(AccountType = exports.AccountType || (exports.AccountType = {}));
/**
    * @export
    * @enum {string}
    */
var AssetReportTransactionTransactionTypeEnum;
(function (AssetReportTransactionTransactionTypeEnum) {
    AssetReportTransactionTransactionTypeEnum["Digital"] = "digital";
    AssetReportTransactionTransactionTypeEnum["Place"] = "place";
    AssetReportTransactionTransactionTypeEnum["Special"] = "special";
    AssetReportTransactionTransactionTypeEnum["Unresolved"] = "unresolved";
})(AssetReportTransactionTransactionTypeEnum = exports.AssetReportTransactionTransactionTypeEnum || (exports.AssetReportTransactionTransactionTypeEnum = {}));
/**
 * Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account.
 * @export
 * @enum {string}
 */
var BankTransferDirection;
(function (BankTransferDirection) {
    BankTransferDirection["Outbound"] = "outbound";
    BankTransferDirection["Inbound"] = "inbound";
    BankTransferDirection["Null"] = "null";
})(BankTransferDirection = exports.BankTransferDirection || (exports.BankTransferDirection = {}));
/**
 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
 * @export
 * @enum {string}
 */
var BankTransferEventListBankTransferType;
(function (BankTransferEventListBankTransferType) {
    BankTransferEventListBankTransferType["Debit"] = "debit";
    BankTransferEventListBankTransferType["Credit"] = "credit";
    BankTransferEventListBankTransferType["Null"] = "null";
})(BankTransferEventListBankTransferType = exports.BankTransferEventListBankTransferType || (exports.BankTransferEventListBankTransferType = {}));
/**
 * Indicates the direction of the transfer: `outbound`: for API-initiated transfers `inbound`: for payments received by the FBO account.
 * @export
 * @enum {string}
 */
var BankTransferEventListDirection;
(function (BankTransferEventListDirection) {
    BankTransferEventListDirection["Inbound"] = "inbound";
    BankTransferEventListDirection["Outbound"] = "outbound";
    BankTransferEventListDirection["Null"] = "null";
})(BankTransferEventListDirection = exports.BankTransferEventListDirection || (exports.BankTransferEventListDirection = {}));
/**
 * The type of event that this bank transfer represents.  `pending`: A new transfer was created; it is in the pending state.  `cancelled`: The transfer was cancelled by the client.  `failed`: The transfer failed, no funds were moved.  `posted`: The transfer has been successfully submitted to the payment network.  `reversed`: A posted transfer was reversed.
 * @export
 * @enum {string}
 */
var BankTransferEventType;
(function (BankTransferEventType) {
    BankTransferEventType["Pending"] = "pending";
    BankTransferEventType["Cancelled"] = "cancelled";
    BankTransferEventType["Failed"] = "failed";
    BankTransferEventType["Posted"] = "posted";
    BankTransferEventType["Reversed"] = "reversed";
})(BankTransferEventType = exports.BankTransferEventType || (exports.BankTransferEventType = {}));
/**
 * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
 * @export
 * @enum {string}
 */
var BankTransferNetwork;
(function (BankTransferNetwork) {
    BankTransferNetwork["Ach"] = "ach";
    BankTransferNetwork["SameDayAch"] = "same-day-ach";
    BankTransferNetwork["Wire"] = "wire";
})(BankTransferNetwork = exports.BankTransferNetwork || (exports.BankTransferNetwork = {}));
/**
 * The status of the transfer.
 * @export
 * @enum {string}
 */
var BankTransferStatus;
(function (BankTransferStatus) {
    BankTransferStatus["Pending"] = "pending";
    BankTransferStatus["Posted"] = "posted";
    BankTransferStatus["Cancelled"] = "cancelled";
    BankTransferStatus["Failed"] = "failed";
    BankTransferStatus["Reversed"] = "reversed";
})(BankTransferStatus = exports.BankTransferStatus || (exports.BankTransferStatus = {}));
/**
 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
 * @export
 * @enum {string}
 */
var BankTransferType;
(function (BankTransferType) {
    BankTransferType["Debit"] = "debit";
    BankTransferType["Credit"] = "credit";
})(BankTransferType = exports.BankTransferType || (exports.BankTransferType = {}));
/**
    * @export
    * @enum {string}
    */
var CauseErrorTypeEnum;
(function (CauseErrorTypeEnum) {
    CauseErrorTypeEnum["InvalidRequest"] = "INVALID_REQUEST";
    CauseErrorTypeEnum["InvalidResult"] = "INVALID_RESULT";
    CauseErrorTypeEnum["InvalidInput"] = "INVALID_INPUT";
    CauseErrorTypeEnum["InstitutionError"] = "INSTITUTION_ERROR";
    CauseErrorTypeEnum["RateLimitExceeded"] = "RATE_LIMIT_EXCEEDED";
    CauseErrorTypeEnum["ApiError"] = "API_ERROR";
    CauseErrorTypeEnum["ItemError"] = "ITEM_ERROR";
    CauseErrorTypeEnum["AssetReportError"] = "ASSET_REPORT_ERROR";
    CauseErrorTypeEnum["RecaptchaError"] = "RECAPTCHA_ERROR";
    CauseErrorTypeEnum["OauthError"] = "OAUTH_ERROR";
    CauseErrorTypeEnum["PaymentError"] = "PAYMENT_ERROR";
    CauseErrorTypeEnum["BankTransferError"] = "BANK_TRANSFER_ERROR";
    CauseErrorTypeEnum["IncomeVerificationError"] = "INCOME_VERIFICATION_ERROR";
})(CauseErrorTypeEnum = exports.CauseErrorTypeEnum || (exports.CauseErrorTypeEnum = {}));
/**
 * ISO-3166-1 alpha-2 country code standard.
 * @export
 * @enum {string}
 */
var CountryCode;
(function (CountryCode) {
    CountryCode["Us"] = "US";
    CountryCode["Gb"] = "GB";
    CountryCode["Es"] = "ES";
    CountryCode["Nl"] = "NL";
    CountryCode["Fr"] = "FR";
    CountryCode["Ie"] = "IE";
    CountryCode["Ca"] = "CA";
    CountryCode["De"] = "DE";
    CountryCode["It"] = "IT";
})(CountryCode = exports.CountryCode || (exports.CountryCode = {}));
/**
 * Valid account subtypes for credit accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-credit).
 * @export
 * @enum {string}
 */
var CreditAccountSubtype;
(function (CreditAccountSubtype) {
    CreditAccountSubtype["CreditCard"] = "credit card";
    CreditAccountSubtype["Paypal"] = "paypal";
    CreditAccountSubtype["All"] = "all";
})(CreditAccountSubtype = exports.CreditAccountSubtype || (exports.CreditAccountSubtype = {}));
/**
 * The account type. This will always be `depository`.
 * @export
 * @enum {string}
 */
var CreditBankIncomeAccountType;
(function (CreditBankIncomeAccountType) {
    CreditBankIncomeAccountType["Depository"] = "depository";
})(CreditBankIncomeAccountType = exports.CreditBankIncomeAccountType || (exports.CreditBankIncomeAccountType = {}));
/**
 * The income category.
 * @export
 * @enum {string}
 */
var CreditBankIncomeCategory;
(function (CreditBankIncomeCategory) {
    CreditBankIncomeCategory["Salary"] = "SALARY";
    CreditBankIncomeCategory["Unemployment"] = "UNEMPLOYMENT";
    CreditBankIncomeCategory["Cash"] = "CASH";
    CreditBankIncomeCategory["GigEconomy"] = "GIG_ECONOMY";
    CreditBankIncomeCategory["Rental"] = "RENTAL";
    CreditBankIncomeCategory["ChildSupport"] = "CHILD_SUPPORT";
    CreditBankIncomeCategory["Military"] = "MILITARY";
    CreditBankIncomeCategory["Retirement"] = "RETIREMENT";
    CreditBankIncomeCategory["LongTermDisability"] = "LONG_TERM_DISABILITY";
    CreditBankIncomeCategory["BankInterest"] = "BANK_INTEREST";
    CreditBankIncomeCategory["Other"] = "OTHER";
})(CreditBankIncomeCategory = exports.CreditBankIncomeCategory || (exports.CreditBankIncomeCategory = {}));
/**
 * A broad categorization of the error. Safe for programmatic use.
 * @export
 * @enum {string}
 */
var CreditBankIncomeErrorType;
(function (CreditBankIncomeErrorType) {
    CreditBankIncomeErrorType["InternalServerError"] = "INTERNAL_SERVER_ERROR";
    CreditBankIncomeErrorType["InsufficientCredentials"] = "INSUFFICIENT_CREDENTIALS";
    CreditBankIncomeErrorType["ItemLocked"] = "ITEM_LOCKED";
    CreditBankIncomeErrorType["UserSetupRequired"] = "USER_SETUP_REQUIRED";
    CreditBankIncomeErrorType["CountryNotSupported"] = "COUNTRY_NOT_SUPPORTED";
    CreditBankIncomeErrorType["InstitutionDown"] = "INSTITUTION_DOWN";
    CreditBankIncomeErrorType["InstitutionNoLongerSupported"] = "INSTITUTION_NO_LONGER_SUPPORTED";
    CreditBankIncomeErrorType["InstitutionNotResponding"] = "INSTITUTION_NOT_RESPONDING";
    CreditBankIncomeErrorType["InvalidCredentials"] = "INVALID_CREDENTIALS";
    CreditBankIncomeErrorType["InvalidMfa"] = "INVALID_MFA";
    CreditBankIncomeErrorType["InvalidSendMethod"] = "INVALID_SEND_METHOD";
    CreditBankIncomeErrorType["ItemLoginRequired"] = "ITEM_LOGIN_REQUIRED";
    CreditBankIncomeErrorType["MfaNotSupported"] = "MFA_NOT_SUPPORTED";
    CreditBankIncomeErrorType["NoAccounts"] = "NO_ACCOUNTS";
    CreditBankIncomeErrorType["ItemNotSupported"] = "ITEM_NOT_SUPPORTED";
    CreditBankIncomeErrorType["AccessNotGranted"] = "ACCESS_NOT_GRANTED";
})(CreditBankIncomeErrorType = exports.CreditBankIncomeErrorType || (exports.CreditBankIncomeErrorType = {}));
/**
 * The income pay frequency.
 * @export
 * @enum {string}
 */
var CreditBankIncomePayFrequency;
(function (CreditBankIncomePayFrequency) {
    CreditBankIncomePayFrequency["Weekly"] = "WEEKLY";
    CreditBankIncomePayFrequency["Biweekly"] = "BIWEEKLY";
    CreditBankIncomePayFrequency["SemiMonthly"] = "SEMI_MONTHLY";
    CreditBankIncomePayFrequency["Monthly"] = "MONTHLY";
    CreditBankIncomePayFrequency["Unknown"] = "UNKNOWN";
})(CreditBankIncomePayFrequency = exports.CreditBankIncomePayFrequency || (exports.CreditBankIncomePayFrequency = {}));
/**
 * The warning code identifies a specific kind of warning. `IDENTITY_UNAVAILABLE`: Unable to extract identity for the Item `TRANSACTIONS_UNAVAILABLE`: Unable to extract transactions for the Item `ITEM_UNAPPROVED`: User did not grant permission to share income data for the Item `REPORT_DELETED`: Report deleted due to customer or consumer request
 * @export
 * @enum {string}
 */
var CreditBankIncomeWarningCode;
(function (CreditBankIncomeWarningCode) {
    CreditBankIncomeWarningCode["IdentityUnavailable"] = "IDENTITY_UNAVAILABLE";
    CreditBankIncomeWarningCode["TransactionsUnavailable"] = "TRANSACTIONS_UNAVAILABLE";
    CreditBankIncomeWarningCode["ItemUnapproved"] = "ITEM_UNAPPROVED";
    CreditBankIncomeWarningCode["ReportDeleted"] = "REPORT_DELETED";
})(CreditBankIncomeWarningCode = exports.CreditBankIncomeWarningCode || (exports.CreditBankIncomeWarningCode = {}));
/**
 * The warning type which will always be `BANK_INCOME_WARNING`.
 * @export
 * @enum {string}
 */
var CreditBankIncomeWarningType;
(function (CreditBankIncomeWarningType) {
    CreditBankIncomeWarningType["BankIncomeWarning"] = "BANK_INCOME_WARNING";
})(CreditBankIncomeWarningType = exports.CreditBankIncomeWarningType || (exports.CreditBankIncomeWarningType = {}));
/**
    * @export
    * @enum {string}
    */
var DepositSwitchAltCreateRequestCountryCodeEnum;
(function (DepositSwitchAltCreateRequestCountryCodeEnum) {
    DepositSwitchAltCreateRequestCountryCodeEnum["Us"] = "US";
    DepositSwitchAltCreateRequestCountryCodeEnum["Ca"] = "CA";
})(DepositSwitchAltCreateRequestCountryCodeEnum = exports.DepositSwitchAltCreateRequestCountryCodeEnum || (exports.DepositSwitchAltCreateRequestCountryCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DepositSwitchCreateRequestCountryCodeEnum;
(function (DepositSwitchCreateRequestCountryCodeEnum) {
    DepositSwitchCreateRequestCountryCodeEnum["Us"] = "US";
    DepositSwitchCreateRequestCountryCodeEnum["Ca"] = "CA";
})(DepositSwitchCreateRequestCountryCodeEnum = exports.DepositSwitchCreateRequestCountryCodeEnum || (exports.DepositSwitchCreateRequestCountryCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DepositSwitchGetResponseStateEnum;
(function (DepositSwitchGetResponseStateEnum) {
    DepositSwitchGetResponseStateEnum["Initialized"] = "initialized";
    DepositSwitchGetResponseStateEnum["Processing"] = "processing";
    DepositSwitchGetResponseStateEnum["Completed"] = "completed";
    DepositSwitchGetResponseStateEnum["Error"] = "error";
})(DepositSwitchGetResponseStateEnum = exports.DepositSwitchGetResponseStateEnum || (exports.DepositSwitchGetResponseStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DepositSwitchGetResponseSwitchMethodEnum;
(function (DepositSwitchGetResponseSwitchMethodEnum) {
    DepositSwitchGetResponseSwitchMethodEnum["Instant"] = "instant";
    DepositSwitchGetResponseSwitchMethodEnum["Mail"] = "mail";
    DepositSwitchGetResponseSwitchMethodEnum["Pdf"] = "pdf";
    DepositSwitchGetResponseSwitchMethodEnum["Null"] = "null";
})(DepositSwitchGetResponseSwitchMethodEnum = exports.DepositSwitchGetResponseSwitchMethodEnum || (exports.DepositSwitchGetResponseSwitchMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DepositSwitchTargetAccountAccountSubtypeEnum;
(function (DepositSwitchTargetAccountAccountSubtypeEnum) {
    DepositSwitchTargetAccountAccountSubtypeEnum["Checking"] = "checking";
    DepositSwitchTargetAccountAccountSubtypeEnum["Savings"] = "savings";
})(DepositSwitchTargetAccountAccountSubtypeEnum = exports.DepositSwitchTargetAccountAccountSubtypeEnum || (exports.DepositSwitchTargetAccountAccountSubtypeEnum = {}));
/**
 * Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository).
 * @export
 * @enum {string}
 */
var DepositoryAccountSubtype;
(function (DepositoryAccountSubtype) {
    DepositoryAccountSubtype["Checking"] = "checking";
    DepositoryAccountSubtype["Savings"] = "savings";
    DepositoryAccountSubtype["Hsa"] = "hsa";
    DepositoryAccountSubtype["Cd"] = "cd";
    DepositoryAccountSubtype["MoneyMarket"] = "money market";
    DepositoryAccountSubtype["Paypal"] = "paypal";
    DepositoryAccountSubtype["Prepaid"] = "prepaid";
    DepositoryAccountSubtype["CashManagement"] = "cash management";
    DepositoryAccountSubtype["Ebt"] = "ebt";
    DepositoryAccountSubtype["All"] = "all";
})(DepositoryAccountSubtype = exports.DepositoryAccountSubtype || (exports.DepositoryAccountSubtype = {}));
/**
 * The type of document.  `DOCUMENT_TYPE_PAYSTUB`: A paystub.  `DOCUMENT_TYPE_BANK_STATEMENT`: A bank statement.  `DOCUMENT_TYPE_US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.  `DOCUMENT_TYPE_US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.  `DOCUMENT_TYPE_US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.  `DOCUMENT_TYPE_US_MILITARY_CLES`: A Civilian Leave and Earnings Statment (CLES) issued by the US military.  `DOCUMENT_TYPE_GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.  `DOCUMENT_TYPE_NONE`: Used to indicate that there is no underlying document for the data.  `UNKNOWN`: Document type could not be determined.
 * @export
 * @enum {string}
 */
var DocType;
(function (DocType) {
    DocType["Unknown"] = "UNKNOWN";
    DocType["DocumentTypePaystub"] = "DOCUMENT_TYPE_PAYSTUB";
    DocType["DocumentTypeBankStatement"] = "DOCUMENT_TYPE_BANK_STATEMENT";
    DocType["DocumentTypeUsTaxW2"] = "DOCUMENT_TYPE_US_TAX_W2";
    DocType["DocumentTypeUsMilitaryEras"] = "DOCUMENT_TYPE_US_MILITARY_ERAS";
    DocType["DocumentTypeUsMilitaryLes"] = "DOCUMENT_TYPE_US_MILITARY_LES";
    DocType["DocumentTypeUsMilitaryCles"] = "DOCUMENT_TYPE_US_MILITARY_CLES";
    DocType["DocumentTypeGig"] = "DOCUMENT_TYPE_GIG";
    DocType["DocumentTypeNone"] = "DOCUMENT_TYPE_NONE";
})(DocType = exports.DocType || (exports.DocType = {}));
/**
 * Commonly used term to describe the earning line item.
 * @export
 * @enum {string}
 */
var EarningsBreakdownCanonicalDescription;
(function (EarningsBreakdownCanonicalDescription) {
    EarningsBreakdownCanonicalDescription["Bonus"] = "BONUS";
    EarningsBreakdownCanonicalDescription["Commission"] = "COMMISSION";
    EarningsBreakdownCanonicalDescription["Overtime"] = "OVERTIME";
    EarningsBreakdownCanonicalDescription["PaidTimeOff"] = "PAID TIME OFF";
    EarningsBreakdownCanonicalDescription["RegularPay"] = "REGULAR PAY";
    EarningsBreakdownCanonicalDescription["Vacation"] = "VACATION";
    EarningsBreakdownCanonicalDescription["BasicAllowanceHousing"] = "BASIC ALLOWANCE HOUSING";
    EarningsBreakdownCanonicalDescription["BasicAllowanceSubsistence"] = "BASIC ALLOWANCE SUBSISTENCE";
    EarningsBreakdownCanonicalDescription["Other"] = "OTHER";
    EarningsBreakdownCanonicalDescription["Null"] = "null";
})(EarningsBreakdownCanonicalDescription = exports.EarningsBreakdownCanonicalDescription || (exports.EarningsBreakdownCanonicalDescription = {}));
/**
    * @export
    * @enum {string}
    */
var EmailTypeEnum;
(function (EmailTypeEnum) {
    EmailTypeEnum["Primary"] = "primary";
    EmailTypeEnum["Secondary"] = "secondary";
    EmailTypeEnum["Other"] = "other";
})(EmailTypeEnum = exports.EmailTypeEnum || (exports.EmailTypeEnum = {}));
/**
 * Current employment status.
 * @export
 * @enum {string}
 */
var EmploymentVerificationStatus;
(function (EmploymentVerificationStatus) {
    EmploymentVerificationStatus["EmploymentStatusActive"] = "EMPLOYMENT_STATUS_ACTIVE";
    EmploymentVerificationStatus["EmploymentStatusInactive"] = "EMPLOYMENT_STATUS_INACTIVE";
    EmploymentVerificationStatus["Null"] = "null";
})(EmploymentVerificationStatus = exports.EmploymentVerificationStatus || (exports.EmploymentVerificationStatus = {}));
/**
 * The possible types of identity data that may have changed.
 * @export
 * @enum {string}
 */
var IdentityUpdateTypes;
(function (IdentityUpdateTypes) {
    IdentityUpdateTypes["Phones"] = "PHONES";
    IdentityUpdateTypes["Addresses"] = "ADDRESSES";
    IdentityUpdateTypes["Emails"] = "EMAILS";
    IdentityUpdateTypes["Names"] = "NAMES";
})(IdentityUpdateTypes = exports.IdentityUpdateTypes || (exports.IdentityUpdateTypes = {}));
/**
    * @export
    * @enum {string}
    */
var IncidentUpdateStatusEnum;
(function (IncidentUpdateStatusEnum) {
    IncidentUpdateStatusEnum["Investigating"] = "INVESTIGATING";
    IncidentUpdateStatusEnum["Identified"] = "IDENTIFIED";
    IncidentUpdateStatusEnum["Scheduled"] = "SCHEDULED";
    IncidentUpdateStatusEnum["Resolved"] = "RESOLVED";
    IncidentUpdateStatusEnum["Unknown"] = "UNKNOWN";
})(IncidentUpdateStatusEnum = exports.IncidentUpdateStatusEnum || (exports.IncidentUpdateStatusEnum = {}));
/**
 * The type of income. Possible values include:   `\"regular\"`: regular income   `\"overtime\"`: overtime income   `\"bonus\"`: bonus income
 * @export
 * @enum {string}
 */
var IncomeBreakdownType;
(function (IncomeBreakdownType) {
    IncomeBreakdownType["Bonus"] = "bonus";
    IncomeBreakdownType["Overtime"] = "overtime";
    IncomeBreakdownType["Regular"] = "regular";
    IncomeBreakdownType["Null"] = "null";
})(IncomeBreakdownType = exports.IncomeBreakdownType || (exports.IncomeBreakdownType = {}));
/**
 * Flow types to retrieve payroll income data
 * @export
 * @enum {string}
 */
var IncomeVerificationPayrollFlowType;
(function (IncomeVerificationPayrollFlowType) {
    IncomeVerificationPayrollFlowType["DigitalIncome"] = "payroll_digital_income";
    IncomeVerificationPayrollFlowType["DocumentIncome"] = "payroll_document_income";
})(IncomeVerificationPayrollFlowType = exports.IncomeVerificationPayrollFlowType || (exports.IncomeVerificationPayrollFlowType = {}));
/**
 * The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:  `\"HIGH\"`: It is very likely that this user can use the digital income verification flow.  \"`LOW`\": It is unlikely that this user can use the digital income verification flow.  `\"UNKNOWN\"`: It was not possible to determine if the user is supportable with the information passed.
 * @export
 * @enum {string}
 */
var IncomeVerificationPrecheckConfidence;
(function (IncomeVerificationPrecheckConfidence) {
    IncomeVerificationPrecheckConfidence["High"] = "HIGH";
    IncomeVerificationPrecheckConfidence["Low"] = "LOW";
    IncomeVerificationPrecheckConfidence["Unknown"] = "UNKNOWN";
})(IncomeVerificationPrecheckConfidence = exports.IncomeVerificationPrecheckConfidence || (exports.IncomeVerificationPrecheckConfidence = {}));
/**
 * The types of source income data that users should be able to share
 * @export
 * @enum {string}
 */
var IncomeVerificationSourceType;
(function (IncomeVerificationSourceType) {
    IncomeVerificationSourceType["Bank"] = "bank";
    IncomeVerificationSourceType["Payroll"] = "payroll";
})(IncomeVerificationSourceType = exports.IncomeVerificationSourceType || (exports.IncomeVerificationSourceType = {}));
/**
 * Valid account subtypes for investment accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-investment).
 * @export
 * @enum {string}
 */
var InvestmentAccountSubtype;
(function (InvestmentAccountSubtype) {
    InvestmentAccountSubtype["_529"] = "529";
    InvestmentAccountSubtype["_401a"] = "401a";
    InvestmentAccountSubtype["_401k"] = "401k";
    InvestmentAccountSubtype["_403B"] = "403B";
    InvestmentAccountSubtype["_457b"] = "457b";
    InvestmentAccountSubtype["Brokerage"] = "brokerage";
    InvestmentAccountSubtype["CashIsa"] = "cash isa";
    InvestmentAccountSubtype["EducationSavingsAccount"] = "education savings account";
    InvestmentAccountSubtype["FixedAnnuity"] = "fixed annuity";
    InvestmentAccountSubtype["Gic"] = "gic";
    InvestmentAccountSubtype["HealthReimbursementArrangement"] = "health reimbursement arrangement";
    InvestmentAccountSubtype["Hsa"] = "hsa";
    InvestmentAccountSubtype["Ira"] = "ira";
    InvestmentAccountSubtype["Isa"] = "isa";
    InvestmentAccountSubtype["Keogh"] = "keogh";
    InvestmentAccountSubtype["Lif"] = "lif";
    InvestmentAccountSubtype["LifeInsurance"] = "life insurance";
    InvestmentAccountSubtype["Lira"] = "lira";
    InvestmentAccountSubtype["Lrif"] = "lrif";
    InvestmentAccountSubtype["Lrsp"] = "lrsp";
    InvestmentAccountSubtype["MutualFund"] = "mutual fund";
    InvestmentAccountSubtype["NonTaxableBrokerageAccount"] = "non-taxable brokerage account";
    InvestmentAccountSubtype["Other"] = "other";
    InvestmentAccountSubtype["OtherAnnuity"] = "other annuity";
    InvestmentAccountSubtype["OtherInsurance"] = "other insurance";
    InvestmentAccountSubtype["Pension"] = "pension";
    InvestmentAccountSubtype["Prif"] = "prif";
    InvestmentAccountSubtype["ProfitSharingPlan"] = "profit sharing plan";
    InvestmentAccountSubtype["Qshr"] = "qshr";
    InvestmentAccountSubtype["Rdsp"] = "rdsp";
    InvestmentAccountSubtype["Resp"] = "resp";
    InvestmentAccountSubtype["Retirement"] = "retirement";
    InvestmentAccountSubtype["Rlif"] = "rlif";
    InvestmentAccountSubtype["Roth"] = "roth";
    InvestmentAccountSubtype["Roth401k"] = "roth 401k";
    InvestmentAccountSubtype["Rrif"] = "rrif";
    InvestmentAccountSubtype["Rrsp"] = "rrsp";
    InvestmentAccountSubtype["Sarsep"] = "sarsep";
    InvestmentAccountSubtype["SepIra"] = "sep ira";
    InvestmentAccountSubtype["SimpleIra"] = "simple ira";
    InvestmentAccountSubtype["Sipp"] = "sipp";
    InvestmentAccountSubtype["StockPlan"] = "stock plan";
    InvestmentAccountSubtype["Tfsa"] = "tfsa";
    InvestmentAccountSubtype["Trust"] = "trust";
    InvestmentAccountSubtype["Ugma"] = "ugma";
    InvestmentAccountSubtype["Utma"] = "utma";
    InvestmentAccountSubtype["VariableAnnuity"] = "variable annuity";
    InvestmentAccountSubtype["All"] = "all";
})(InvestmentAccountSubtype = exports.InvestmentAccountSubtype || (exports.InvestmentAccountSubtype = {}));
/**
 * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
 * @export
 * @enum {string}
 */
var InvestmentTransactionSubtype;
(function (InvestmentTransactionSubtype) {
    InvestmentTransactionSubtype["AccountFee"] = "account fee";
    InvestmentTransactionSubtype["Adjustment"] = "adjustment";
    InvestmentTransactionSubtype["Assignment"] = "assignment";
    InvestmentTransactionSubtype["Buy"] = "buy";
    InvestmentTransactionSubtype["BuyToCover"] = "buy to cover";
    InvestmentTransactionSubtype["Contribution"] = "contribution";
    InvestmentTransactionSubtype["Deposit"] = "deposit";
    InvestmentTransactionSubtype["Distribution"] = "distribution";
    InvestmentTransactionSubtype["Dividend"] = "dividend";
    InvestmentTransactionSubtype["DividendReinvestment"] = "dividend reinvestment";
    InvestmentTransactionSubtype["Exercise"] = "exercise";
    InvestmentTransactionSubtype["Expire"] = "expire";
    InvestmentTransactionSubtype["FundFee"] = "fund fee";
    InvestmentTransactionSubtype["Interest"] = "interest";
    InvestmentTransactionSubtype["InterestReceivable"] = "interest receivable";
    InvestmentTransactionSubtype["InterestReinvestment"] = "interest reinvestment";
    InvestmentTransactionSubtype["LegalFee"] = "legal fee";
    InvestmentTransactionSubtype["LoanPayment"] = "loan payment";
    InvestmentTransactionSubtype["LongTermCapitalGain"] = "long-term capital gain";
    InvestmentTransactionSubtype["LongTermCapitalGainReinvestment"] = "long-term capital gain reinvestment";
    InvestmentTransactionSubtype["ManagementFee"] = "management fee";
    InvestmentTransactionSubtype["MarginExpense"] = "margin expense";
    InvestmentTransactionSubtype["Merger"] = "merger";
    InvestmentTransactionSubtype["MiscellaneousFee"] = "miscellaneous fee";
    InvestmentTransactionSubtype["NonQualifiedDividend"] = "non-qualified dividend";
    InvestmentTransactionSubtype["NonResidentTax"] = "non-resident tax";
    InvestmentTransactionSubtype["PendingCredit"] = "pending credit";
    InvestmentTransactionSubtype["PendingDebit"] = "pending debit";
    InvestmentTransactionSubtype["QualifiedDividend"] = "qualified dividend";
    InvestmentTransactionSubtype["Rebalance"] = "rebalance";
    InvestmentTransactionSubtype["ReturnOfPrincipal"] = "return of principal";
    InvestmentTransactionSubtype["Sell"] = "sell";
    InvestmentTransactionSubtype["SellShort"] = "sell short";
    InvestmentTransactionSubtype["ShortTermCapitalGain"] = "short-term capital gain";
    InvestmentTransactionSubtype["ShortTermCapitalGainReinvestment"] = "short-term capital gain reinvestment";
    InvestmentTransactionSubtype["SpinOff"] = "spin off";
    InvestmentTransactionSubtype["Split"] = "split";
    InvestmentTransactionSubtype["StockDistribution"] = "stock distribution";
    InvestmentTransactionSubtype["Tax"] = "tax";
    InvestmentTransactionSubtype["TaxWithheld"] = "tax withheld";
    InvestmentTransactionSubtype["Transfer"] = "transfer";
    InvestmentTransactionSubtype["TransferFee"] = "transfer fee";
    InvestmentTransactionSubtype["TrustFee"] = "trust fee";
    InvestmentTransactionSubtype["UnqualifiedGain"] = "unqualified gain";
    InvestmentTransactionSubtype["Withdrawal"] = "withdrawal";
})(InvestmentTransactionSubtype = exports.InvestmentTransactionSubtype || (exports.InvestmentTransactionSubtype = {}));
/**
 * Value is one of the following: `buy`: Buying an investment `sell`: Selling an investment `cancel`: A cancellation of a pending transaction `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity which modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer  For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
 * @export
 * @enum {string}
 */
var InvestmentTransactionType;
(function (InvestmentTransactionType) {
    InvestmentTransactionType["Buy"] = "buy";
    InvestmentTransactionType["Sell"] = "sell";
    InvestmentTransactionType["Cancel"] = "cancel";
    InvestmentTransactionType["Cash"] = "cash";
    InvestmentTransactionType["Fee"] = "fee";
    InvestmentTransactionType["Transfer"] = "transfer";
})(InvestmentTransactionType = exports.InvestmentTransactionType || (exports.InvestmentTransactionType = {}));
/**
    * @export
    * @enum {string}
    */
var ItemUpdateTypeEnum;
(function (ItemUpdateTypeEnum) {
    ItemUpdateTypeEnum["Background"] = "background";
    ItemUpdateTypeEnum["UserPresentRequired"] = "user_present_required";
})(ItemUpdateTypeEnum = exports.ItemUpdateTypeEnum || (exports.ItemUpdateTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LinkTokenCreateRequestAuthFlowTypeEnum;
(function (LinkTokenCreateRequestAuthFlowTypeEnum) {
    LinkTokenCreateRequestAuthFlowTypeEnum["FlexibleAuth"] = "FLEXIBLE_AUTH";
})(LinkTokenCreateRequestAuthFlowTypeEnum = exports.LinkTokenCreateRequestAuthFlowTypeEnum || (exports.LinkTokenCreateRequestAuthFlowTypeEnum = {}));
/**
 * Valid account subtypes for loan accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-loan).
 * @export
 * @enum {string}
 */
var LoanAccountSubtype;
(function (LoanAccountSubtype) {
    LoanAccountSubtype["Auto"] = "auto";
    LoanAccountSubtype["Business"] = "business";
    LoanAccountSubtype["Commercial"] = "commercial";
    LoanAccountSubtype["Construction"] = "construction";
    LoanAccountSubtype["Consumer"] = "consumer";
    LoanAccountSubtype["HomeEquity"] = "home equity";
    LoanAccountSubtype["Loan"] = "loan";
    LoanAccountSubtype["Mortgage"] = "mortgage";
    LoanAccountSubtype["LineOfCredit"] = "line of credit";
    LoanAccountSubtype["Student"] = "student";
    LoanAccountSubtype["Other"] = "other";
    LoanAccountSubtype["All"] = "all";
})(LoanAccountSubtype = exports.LoanAccountSubtype || (exports.LoanAccountSubtype = {}));
/**
    * @export
    * @enum {string}
    */
var ModelErrorErrorTypeEnum;
(function (ModelErrorErrorTypeEnum) {
    ModelErrorErrorTypeEnum["InvalidRequest"] = "INVALID_REQUEST";
    ModelErrorErrorTypeEnum["InvalidResult"] = "INVALID_RESULT";
    ModelErrorErrorTypeEnum["InvalidInput"] = "INVALID_INPUT";
    ModelErrorErrorTypeEnum["InstitutionError"] = "INSTITUTION_ERROR";
    ModelErrorErrorTypeEnum["RateLimitExceeded"] = "RATE_LIMIT_EXCEEDED";
    ModelErrorErrorTypeEnum["ApiError"] = "API_ERROR";
    ModelErrorErrorTypeEnum["ItemError"] = "ITEM_ERROR";
    ModelErrorErrorTypeEnum["AssetReportError"] = "ASSET_REPORT_ERROR";
    ModelErrorErrorTypeEnum["RecaptchaError"] = "RECAPTCHA_ERROR";
    ModelErrorErrorTypeEnum["OauthError"] = "OAUTH_ERROR";
    ModelErrorErrorTypeEnum["PaymentError"] = "PAYMENT_ERROR";
    ModelErrorErrorTypeEnum["BankTransferError"] = "BANK_TRANSFER_ERROR";
    ModelErrorErrorTypeEnum["IncomeVerificationError"] = "INCOME_VERIFICATION_ERROR";
})(ModelErrorErrorTypeEnum = exports.ModelErrorErrorTypeEnum || (exports.ModelErrorErrorTypeEnum = {}));
/**
 * `investment:` Investment account.  `credit:` Credit card  `depository:` Depository account  `loan:` Loan account  `payroll:` Payroll account  `other:` Non-specified account type  See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
 * @export
 * @enum {string}
 */
var OverrideAccountType;
(function (OverrideAccountType) {
    OverrideAccountType["Investment"] = "investment";
    OverrideAccountType["Credit"] = "credit";
    OverrideAccountType["Depository"] = "depository";
    OverrideAccountType["Loan"] = "loan";
    OverrideAccountType["Payroll"] = "payroll";
    OverrideAccountType["Other"] = "other";
})(OverrideAccountType = exports.OverrideAccountType || (exports.OverrideAccountType = {}));
/**
 * The frequency of the pay period.
 * @export
 * @enum {string}
 */
var PayFrequencyValue;
(function (PayFrequencyValue) {
    PayFrequencyValue["Monthly"] = "monthly";
    PayFrequencyValue["Semimonthly"] = "semimonthly";
    PayFrequencyValue["Weekly"] = "weekly";
    PayFrequencyValue["Biweekly"] = "biweekly";
    PayFrequencyValue["Unknown"] = "unknown";
    PayFrequencyValue["Null"] = "null";
})(PayFrequencyValue = exports.PayFrequencyValue || (exports.PayFrequencyValue = {}));
/**
    * @export
    * @enum {string}
    */
var PayPeriodDetailsPayFrequencyEnum;
(function (PayPeriodDetailsPayFrequencyEnum) {
    PayPeriodDetailsPayFrequencyEnum["PayFrequencyUnknown"] = "PAY_FREQUENCY_UNKNOWN";
    PayPeriodDetailsPayFrequencyEnum["PayFrequencyWeekly"] = "PAY_FREQUENCY_WEEKLY";
    PayPeriodDetailsPayFrequencyEnum["PayFrequencyBiweekly"] = "PAY_FREQUENCY_BIWEEKLY";
    PayPeriodDetailsPayFrequencyEnum["PayFrequencySemimonthly"] = "PAY_FREQUENCY_SEMIMONTHLY";
    PayPeriodDetailsPayFrequencyEnum["PayFrequencyMonthly"] = "PAY_FREQUENCY_MONTHLY";
    PayPeriodDetailsPayFrequencyEnum["Null"] = "null";
})(PayPeriodDetailsPayFrequencyEnum = exports.PayPeriodDetailsPayFrequencyEnum || (exports.PayPeriodDetailsPayFrequencyEnum = {}));
/**
 * The ISO-4217 currency code of the payment. For standing orders and payment consents, `\"GBP\"` must be used.
 * @export
 * @enum {string}
 */
var PaymentAmountCurrency;
(function (PaymentAmountCurrency) {
    PaymentAmountCurrency["Gbp"] = "GBP";
    PaymentAmountCurrency["Eur"] = "EUR";
})(PaymentAmountCurrency = exports.PaymentAmountCurrency || (exports.PaymentAmountCurrency = {}));
/**
 * The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.
 * @export
 * @enum {string}
 */
var PaymentChannel;
(function (PaymentChannel) {
    PaymentChannel["Online"] = "online";
    PaymentChannel["InStore"] = "in store";
    PaymentChannel["Other"] = "other";
})(PaymentChannel = exports.PaymentChannel || (exports.PaymentChannel = {}));
/**
 * Where the payment consent period should start.  `CALENDAR`: line up with a calendar.  `CONSENT`: on the date of consent creation.
 * @export
 * @enum {string}
 */
var PaymentConsentPeriodicAlignment;
(function (PaymentConsentPeriodicAlignment) {
    PaymentConsentPeriodicAlignment["Calendar"] = "CALENDAR";
    PaymentConsentPeriodicAlignment["Consent"] = "CONSENT";
})(PaymentConsentPeriodicAlignment = exports.PaymentConsentPeriodicAlignment || (exports.PaymentConsentPeriodicAlignment = {}));
/**
 * Payment consent periodic interval.
 * @export
 * @enum {string}
 */
var PaymentConsentPeriodicInterval;
(function (PaymentConsentPeriodicInterval) {
    PaymentConsentPeriodicInterval["Day"] = "DAY";
    PaymentConsentPeriodicInterval["Week"] = "WEEK";
    PaymentConsentPeriodicInterval["Month"] = "MONTH";
    PaymentConsentPeriodicInterval["Year"] = "YEAR";
})(PaymentConsentPeriodicInterval = exports.PaymentConsentPeriodicInterval || (exports.PaymentConsentPeriodicInterval = {}));
/**
 * Payment consent scope. Defines possible directions for payments made with the given consent.  `ME_TO_ME`: Allows moving money between accounts owned by the same user.  `EXTERNAL`: Allows initiating payments from the user\'s account to third parties.
 * @export
 * @enum {string}
 */
var PaymentInitiationConsentScope;
(function (PaymentInitiationConsentScope) {
    PaymentInitiationConsentScope["MeToMe"] = "ME_TO_ME";
    PaymentInitiationConsentScope["External"] = "EXTERNAL";
})(PaymentInitiationConsentScope = exports.PaymentInitiationConsentScope || (exports.PaymentInitiationConsentScope = {}));
/**
 * The status of the payment consent.  `UNAUTHORISED`: Consent created, but requires user authorisation.  `REJECTED`: Consent authorisation was rejected by the user and/or the bank.  `AUTHORISED`: Consent is active and ready to be used.  `REVOKED`: Consent has been revoked and can no longer be used.  `EXPIRED`: Consent is no longer valid.
 * @export
 * @enum {string}
 */
var PaymentInitiationConsentStatus;
(function (PaymentInitiationConsentStatus) {
    PaymentInitiationConsentStatus["Unauthorised"] = "UNAUTHORISED";
    PaymentInitiationConsentStatus["Authorised"] = "AUTHORISED";
    PaymentInitiationConsentStatus["Revoked"] = "REVOKED";
    PaymentInitiationConsentStatus["Rejected"] = "REJECTED";
    PaymentInitiationConsentStatus["Expired"] = "EXPIRED";
})(PaymentInitiationConsentStatus = exports.PaymentInitiationConsentStatus || (exports.PaymentInitiationConsentStatus = {}));
/**
 * For a payment returned by this endpoint, there is only one possible value:  `PAYMENT_STATUS_INPUT_NEEDED`: The initial phase of the payment
 * @export
 * @enum {string}
 */
var PaymentInitiationPaymentCreateStatus;
(function (PaymentInitiationPaymentCreateStatus) {
    PaymentInitiationPaymentCreateStatus["PaymentStatusInputNeeded"] = "PAYMENT_STATUS_INPUT_NEEDED";
})(PaymentInitiationPaymentCreateStatus = exports.PaymentInitiationPaymentCreateStatus || (exports.PaymentInitiationPaymentCreateStatus = {}));
/**
 * The status of the payment.  `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.  `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.  `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.  `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.  `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.  `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.  `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.  `PAYMENT_STATUS_EXECUTED`: The payment has been successfully initiated and is considered complete.  `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.  `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.  Deprecated: These statuses will be removed in a future release.  `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.  `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.  `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
 * @export
 * @enum {string}
 */
var PaymentInitiationPaymentStatus;
(function (PaymentInitiationPaymentStatus) {
    PaymentInitiationPaymentStatus["InputNeeded"] = "PAYMENT_STATUS_INPUT_NEEDED";
    PaymentInitiationPaymentStatus["Processing"] = "PAYMENT_STATUS_PROCESSING";
    PaymentInitiationPaymentStatus["Initiated"] = "PAYMENT_STATUS_INITIATED";
    PaymentInitiationPaymentStatus["Completed"] = "PAYMENT_STATUS_COMPLETED";
    PaymentInitiationPaymentStatus["InsufficientFunds"] = "PAYMENT_STATUS_INSUFFICIENT_FUNDS";
    PaymentInitiationPaymentStatus["Failed"] = "PAYMENT_STATUS_FAILED";
    PaymentInitiationPaymentStatus["Blocked"] = "PAYMENT_STATUS_BLOCKED";
    PaymentInitiationPaymentStatus["Unknown"] = "PAYMENT_STATUS_UNKNOWN";
    PaymentInitiationPaymentStatus["Executed"] = "PAYMENT_STATUS_EXECUTED";
    PaymentInitiationPaymentStatus["Authorising"] = "PAYMENT_STATUS_AUTHORISING";
    PaymentInitiationPaymentStatus["Cancelled"] = "PAYMENT_STATUS_CANCELLED";
    PaymentInitiationPaymentStatus["Established"] = "PAYMENT_STATUS_ESTABLISHED";
    PaymentInitiationPaymentStatus["Rejected"] = "PAYMENT_STATUS_REJECTED";
})(PaymentInitiationPaymentStatus = exports.PaymentInitiationPaymentStatus || (exports.PaymentInitiationPaymentStatus = {}));
/**
 * The status of the refund.  `PROCESSING`: The refund is currently being processed. The refund will automatically exit this state when processing is complete.  `INITIATED`: The refund has been successfully initiated.  `EXECUTED`: Indicates that the refund has been successfully executed.  `FAILED`: The refund has failed to be executed. This error is retryable once the root cause is resolved.
 * @export
 * @enum {string}
 */
var PaymentInitiationRefundStatus;
(function (PaymentInitiationRefundStatus) {
    PaymentInitiationRefundStatus["Processing"] = "PROCESSING";
    PaymentInitiationRefundStatus["Executed"] = "EXECUTED";
    PaymentInitiationRefundStatus["Initiated"] = "INITIATED";
    PaymentInitiationRefundStatus["Failed"] = "FAILED";
})(PaymentInitiationRefundStatus = exports.PaymentInitiationRefundStatus || (exports.PaymentInitiationRefundStatus = {}));
/**
 * The frequency interval of the payment.
 * @export
 * @enum {string}
 */
var PaymentScheduleInterval;
(function (PaymentScheduleInterval) {
    PaymentScheduleInterval["Weekly"] = "WEEKLY";
    PaymentScheduleInterval["Monthly"] = "MONTHLY";
})(PaymentScheduleInterval = exports.PaymentScheduleInterval || (exports.PaymentScheduleInterval = {}));
/**
 * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.  `FASTER_PAYMENTS`: Enables payments to move quickly between UK bank accounts. Default value in the UK.  `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.  `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
 * @export
 * @enum {string}
 */
var PaymentScheme;
(function (PaymentScheme) {
    PaymentScheme["Null"] = "null";
    PaymentScheme["FasterPayments"] = "FASTER_PAYMENTS";
    PaymentScheme["SepaCreditTransfer"] = "SEPA_CREDIT_TRANSFER";
    PaymentScheme["SepaCreditTransferInstant"] = "SEPA_CREDIT_TRANSFER_INSTANT";
})(PaymentScheme = exports.PaymentScheme || (exports.PaymentScheme = {}));
/**
 * The frequency at which the employee is paid. Possible values: `MONTHLY`, `BI-WEEKLY`, `WEEKLY`, `SEMI-MONTHLY`.
 * @export
 * @enum {string}
 */
var PaystubPayFrequency;
(function (PaystubPayFrequency) {
    PaystubPayFrequency["Monthly"] = "MONTHLY";
    PaystubPayFrequency["BiWeekly"] = "BI-WEEKLY";
    PaystubPayFrequency["Weekly"] = "WEEKLY";
    PaystubPayFrequency["SemiMonthly"] = "SEMI-MONTHLY";
    PaystubPayFrequency["Null"] = "null";
})(PaystubPayFrequency = exports.PaystubPayFrequency || (exports.PaystubPayFrequency = {}));
/**
 * Derived verification status.
 * @export
 * @enum {string}
 */
var PaystubVerificationStatus;
(function (PaystubVerificationStatus) {
    PaystubVerificationStatus["PaystubVerificationStatusUnknown"] = "PAYSTUB_VERIFICATION_STATUS_UNKNOWN";
    PaystubVerificationStatus["PaystubVerificationStatusVerified"] = "PAYSTUB_VERIFICATION_STATUS_VERIFIED";
    PaystubVerificationStatus["PaystubVerificationStatusFraudulent"] = "PAYSTUB_VERIFICATION_STATUS_FRAUDULENT";
    PaystubVerificationStatus["Null"] = "null";
})(PaystubVerificationStatus = exports.PaystubVerificationStatus || (exports.PaystubVerificationStatus = {}));
/**
    * @export
    * @enum {string}
    */
var PhoneNumberTypeEnum;
(function (PhoneNumberTypeEnum) {
    PhoneNumberTypeEnum["Home"] = "home";
    PhoneNumberTypeEnum["Work"] = "work";
    PhoneNumberTypeEnum["Office"] = "office";
    PhoneNumberTypeEnum["Mobile"] = "mobile";
    PhoneNumberTypeEnum["Mobile1"] = "mobile1";
    PhoneNumberTypeEnum["Other"] = "other";
})(PhoneNumberTypeEnum = exports.PhoneNumberTypeEnum || (exports.PhoneNumberTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PlaidErrorErrorTypeEnum;
(function (PlaidErrorErrorTypeEnum) {
    PlaidErrorErrorTypeEnum["InvalidRequest"] = "INVALID_REQUEST";
    PlaidErrorErrorTypeEnum["InvalidResult"] = "INVALID_RESULT";
    PlaidErrorErrorTypeEnum["InvalidInput"] = "INVALID_INPUT";
    PlaidErrorErrorTypeEnum["InstitutionError"] = "INSTITUTION_ERROR";
    PlaidErrorErrorTypeEnum["RateLimitExceeded"] = "RATE_LIMIT_EXCEEDED";
    PlaidErrorErrorTypeEnum["ApiError"] = "API_ERROR";
    PlaidErrorErrorTypeEnum["ItemError"] = "ITEM_ERROR";
    PlaidErrorErrorTypeEnum["AssetReportError"] = "ASSET_REPORT_ERROR";
    PlaidErrorErrorTypeEnum["RecaptchaError"] = "RECAPTCHA_ERROR";
    PlaidErrorErrorTypeEnum["OauthError"] = "OAUTH_ERROR";
    PlaidErrorErrorTypeEnum["PaymentError"] = "PAYMENT_ERROR";
    PlaidErrorErrorTypeEnum["BankTransferError"] = "BANK_TRANSFER_ERROR";
    PlaidErrorErrorTypeEnum["IncomeVerificationError"] = "INCOME_VERIFICATION_ERROR";
})(PlaidErrorErrorTypeEnum = exports.PlaidErrorErrorTypeEnum || (exports.PlaidErrorErrorTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ProcessorTokenCreateRequestProcessorEnum;
(function (ProcessorTokenCreateRequestProcessorEnum) {
    ProcessorTokenCreateRequestProcessorEnum["Dwolla"] = "dwolla";
    ProcessorTokenCreateRequestProcessorEnum["Galileo"] = "galileo";
    ProcessorTokenCreateRequestProcessorEnum["ModernTreasury"] = "modern_treasury";
    ProcessorTokenCreateRequestProcessorEnum["Ocrolus"] = "ocrolus";
    ProcessorTokenCreateRequestProcessorEnum["PrimeTrust"] = "prime_trust";
    ProcessorTokenCreateRequestProcessorEnum["Vesta"] = "vesta";
    ProcessorTokenCreateRequestProcessorEnum["Drivewealth"] = "drivewealth";
    ProcessorTokenCreateRequestProcessorEnum["Vopay"] = "vopay";
    ProcessorTokenCreateRequestProcessorEnum["Achq"] = "achq";
    ProcessorTokenCreateRequestProcessorEnum["Check"] = "check";
    ProcessorTokenCreateRequestProcessorEnum["Checkbook"] = "checkbook";
    ProcessorTokenCreateRequestProcessorEnum["Circle"] = "circle";
    ProcessorTokenCreateRequestProcessorEnum["SilaMoney"] = "sila_money";
    ProcessorTokenCreateRequestProcessorEnum["Rize"] = "rize";
    ProcessorTokenCreateRequestProcessorEnum["SvbApi"] = "svb_api";
    ProcessorTokenCreateRequestProcessorEnum["Unit"] = "unit";
    ProcessorTokenCreateRequestProcessorEnum["Wyre"] = "wyre";
    ProcessorTokenCreateRequestProcessorEnum["Lithic"] = "lithic";
    ProcessorTokenCreateRequestProcessorEnum["Alpaca"] = "alpaca";
    ProcessorTokenCreateRequestProcessorEnum["Astra"] = "astra";
    ProcessorTokenCreateRequestProcessorEnum["Moov"] = "moov";
    ProcessorTokenCreateRequestProcessorEnum["TreasuryPrime"] = "treasury_prime";
    ProcessorTokenCreateRequestProcessorEnum["Marqeta"] = "marqeta";
    ProcessorTokenCreateRequestProcessorEnum["Checkout"] = "checkout";
    ProcessorTokenCreateRequestProcessorEnum["Solid"] = "solid";
    ProcessorTokenCreateRequestProcessorEnum["ApexClearing"] = "apex_clearing";
})(ProcessorTokenCreateRequestProcessorEnum = exports.ProcessorTokenCreateRequestProcessorEnum || (exports.ProcessorTokenCreateRequestProcessorEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ProductStatusStatusEnum;
(function (ProductStatusStatusEnum) {
    ProductStatusStatusEnum["Healthy"] = "HEALTHY";
    ProductStatusStatusEnum["Degraded"] = "DEGRADED";
    ProductStatusStatusEnum["Down"] = "DOWN";
})(ProductStatusStatusEnum = exports.ProductStatusStatusEnum || (exports.ProductStatusStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ProductStatusBreakdownRefreshIntervalEnum;
(function (ProductStatusBreakdownRefreshIntervalEnum) {
    ProductStatusBreakdownRefreshIntervalEnum["Normal"] = "NORMAL";
    ProductStatusBreakdownRefreshIntervalEnum["Delayed"] = "DELAYED";
    ProductStatusBreakdownRefreshIntervalEnum["Stopped"] = "STOPPED";
})(ProductStatusBreakdownRefreshIntervalEnum = exports.ProductStatusBreakdownRefreshIntervalEnum || (exports.ProductStatusBreakdownRefreshIntervalEnum = {}));
/**
 * A list of products that an institution can support. All Items must be initialized with at least one product. The Balance product is always available and does not need to be specified during initialization.
 * @export
 * @enum {string}
 */
var Products;
(function (Products) {
    Products["Assets"] = "assets";
    Products["Auth"] = "auth";
    Products["Balance"] = "balance";
    Products["Identity"] = "identity";
    Products["Investments"] = "investments";
    Products["Liabilities"] = "liabilities";
    Products["PaymentInitiation"] = "payment_initiation";
    Products["Transactions"] = "transactions";
    Products["CreditDetails"] = "credit_details";
    Products["Income"] = "income";
    Products["IncomeVerification"] = "income_verification";
    Products["DepositSwitch"] = "deposit_switch";
    Products["StandingOrders"] = "standing_orders";
    Products["Transfer"] = "transfer";
    Products["Employment"] = "employment";
    Products["RecurringTransactions"] = "recurring_transactions";
})(Products = exports.Products || (exports.Products = {}));
/**
 * Describes the frequency of the transaction stream.
 * @export
 * @enum {string}
 */
var RecurringTransactionFrequency;
(function (RecurringTransactionFrequency) {
    RecurringTransactionFrequency["Unknown"] = "UNKNOWN";
    RecurringTransactionFrequency["Weekly"] = "WEEKLY";
    RecurringTransactionFrequency["Biweekly"] = "BIWEEKLY";
    RecurringTransactionFrequency["SemiMonthly"] = "SEMI_MONTHLY";
    RecurringTransactionFrequency["Monthly"] = "MONTHLY";
})(RecurringTransactionFrequency = exports.RecurringTransactionFrequency || (exports.RecurringTransactionFrequency = {}));
/**
 * The webhook code indicating which endpoint was called. It can be one of `GET_CALLED`, `REFRESH_CALLED` or `AUDIT_COPY_CREATE_CALLED`.
 * @export
 * @enum {string}
 */
var RelayEvent;
(function (RelayEvent) {
    RelayEvent["GetCalled"] = "GET_CALLED";
    RelayEvent["RefreshCalled"] = "REFRESH_CALLED";
    RelayEvent["AuditCopyCreateCalled"] = "AUDIT_COPY_CREATE_CALLED";
})(RelayEvent = exports.RelayEvent || (exports.RelayEvent = {}));
/**
    * @export
    * @enum {string}
    */
var SandboxIncomeFireWebhookRequestVerificationStatusEnum;
(function (SandboxIncomeFireWebhookRequestVerificationStatusEnum) {
    SandboxIncomeFireWebhookRequestVerificationStatusEnum["ProcessingComplete"] = "VERIFICATION_STATUS_PROCESSING_COMPLETE";
    SandboxIncomeFireWebhookRequestVerificationStatusEnum["ProcessingFailed"] = "VERIFICATION_STATUS_PROCESSING_FAILED";
    SandboxIncomeFireWebhookRequestVerificationStatusEnum["PendingApproval"] = "VERIFICATION_STATUS_PENDING_APPROVAL";
})(SandboxIncomeFireWebhookRequestVerificationStatusEnum = exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum || (exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SandboxItemFireWebhookRequestWebhookCodeEnum;
(function (SandboxItemFireWebhookRequestWebhookCodeEnum) {
    SandboxItemFireWebhookRequestWebhookCodeEnum["DefaultUpdate"] = "DEFAULT_UPDATE";
    SandboxItemFireWebhookRequestWebhookCodeEnum["NewAccountsAvailable"] = "NEW_ACCOUNTS_AVAILABLE";
    SandboxItemFireWebhookRequestWebhookCodeEnum["AuthDataUpdate"] = "AUTH_DATA_UPDATE";
})(SandboxItemFireWebhookRequestWebhookCodeEnum = exports.SandboxItemFireWebhookRequestWebhookCodeEnum || (exports.SandboxItemFireWebhookRequestWebhookCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SandboxItemSetVerificationStatusRequestVerificationStatusEnum;
(function (SandboxItemSetVerificationStatusRequestVerificationStatusEnum) {
    SandboxItemSetVerificationStatusRequestVerificationStatusEnum["AutomaticallyVerified"] = "automatically_verified";
    SandboxItemSetVerificationStatusRequestVerificationStatusEnum["VerificationExpired"] = "verification_expired";
})(SandboxItemSetVerificationStatusRequestVerificationStatusEnum = exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum || (exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum = {}));
/**
 * An indicator for when scopes are being updated. When scopes are updated via enrollment (i.e. OAuth), the partner must send `ENROLLMENT`. When scopes are updated in a post-enrollment view, the partner must send `PORTAL`.
 * @export
 * @enum {string}
 */
var ScopesContext;
(function (ScopesContext) {
    ScopesContext["Enrollment"] = "ENROLLMENT";
    ScopesContext["Portal"] = "PORTAL";
})(ScopesContext = exports.ScopesContext || (exports.ScopesContext = {}));
/**
    * @export
    * @enum {string}
    */
var StudentLoanStatusTypeEnum;
(function (StudentLoanStatusTypeEnum) {
    StudentLoanStatusTypeEnum["Cancelled"] = "cancelled";
    StudentLoanStatusTypeEnum["ChargedOff"] = "charged off";
    StudentLoanStatusTypeEnum["Claim"] = "claim";
    StudentLoanStatusTypeEnum["Consolidated"] = "consolidated";
    StudentLoanStatusTypeEnum["Deferment"] = "deferment";
    StudentLoanStatusTypeEnum["Delinquent"] = "delinquent";
    StudentLoanStatusTypeEnum["Discharged"] = "discharged";
    StudentLoanStatusTypeEnum["Extension"] = "extension";
    StudentLoanStatusTypeEnum["Forbearance"] = "forbearance";
    StudentLoanStatusTypeEnum["InGrace"] = "in grace";
    StudentLoanStatusTypeEnum["InMilitary"] = "in military";
    StudentLoanStatusTypeEnum["InSchool"] = "in school";
    StudentLoanStatusTypeEnum["NotFullyDisbursed"] = "not fully disbursed";
    StudentLoanStatusTypeEnum["Other"] = "other";
    StudentLoanStatusTypeEnum["PaidInFull"] = "paid in full";
    StudentLoanStatusTypeEnum["Refunded"] = "refunded";
    StudentLoanStatusTypeEnum["Repayment"] = "repayment";
    StudentLoanStatusTypeEnum["Transferred"] = "transferred";
})(StudentLoanStatusTypeEnum = exports.StudentLoanStatusTypeEnum || (exports.StudentLoanStatusTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var StudentRepaymentPlanTypeEnum;
(function (StudentRepaymentPlanTypeEnum) {
    StudentRepaymentPlanTypeEnum["ExtendedGraduated"] = "extended graduated";
    StudentRepaymentPlanTypeEnum["ExtendedStandard"] = "extended standard";
    StudentRepaymentPlanTypeEnum["Graduated"] = "graduated";
    StudentRepaymentPlanTypeEnum["IncomeContingentRepayment"] = "income-contingent repayment";
    StudentRepaymentPlanTypeEnum["IncomeBasedRepayment"] = "income-based repayment";
    StudentRepaymentPlanTypeEnum["InterestOnly"] = "interest-only";
    StudentRepaymentPlanTypeEnum["Other"] = "other";
    StudentRepaymentPlanTypeEnum["PayAsYouEarn"] = "pay as you earn";
    StudentRepaymentPlanTypeEnum["RevisedPayAsYouEarn"] = "revised pay as you earn";
    StudentRepaymentPlanTypeEnum["Standard"] = "standard";
    StudentRepaymentPlanTypeEnum["Null"] = "null";
})(StudentRepaymentPlanTypeEnum = exports.StudentRepaymentPlanTypeEnum || (exports.StudentRepaymentPlanTypeEnum = {}));
/**
 * Commonly used term to describe the line item.
 * @export
 * @enum {string}
 */
var TotalCanonicalDescription;
(function (TotalCanonicalDescription) {
    TotalCanonicalDescription["Bonus"] = "BONUS";
    TotalCanonicalDescription["Commission"] = "COMMISSION";
    TotalCanonicalDescription["Overtime"] = "OVERTIME";
    TotalCanonicalDescription["PaidTimeOff"] = "PAID TIME OFF";
    TotalCanonicalDescription["RegularPay"] = "REGULAR PAY";
    TotalCanonicalDescription["Vacation"] = "VACATION";
    TotalCanonicalDescription["EmployeeMedicare"] = "EMPLOYEE MEDICARE";
    TotalCanonicalDescription["Fica"] = "FICA";
    TotalCanonicalDescription["SocialSecurityEmployeeTax"] = "SOCIAL SECURITY EMPLOYEE TAX";
    TotalCanonicalDescription["Medical"] = "MEDICAL";
    TotalCanonicalDescription["Vision"] = "VISION";
    TotalCanonicalDescription["Dental"] = "DENTAL";
    TotalCanonicalDescription["NetPay"] = "NET PAY";
    TotalCanonicalDescription["Taxes"] = "TAXES";
    TotalCanonicalDescription["NotFound"] = "NOT_FOUND";
    TotalCanonicalDescription["Other"] = "OTHER";
    TotalCanonicalDescription["Null"] = "null";
})(TotalCanonicalDescription = exports.TotalCanonicalDescription || (exports.TotalCanonicalDescription = {}));
/**
    * @export
    * @enum {string}
    */
var TransactionTransactionTypeEnum;
(function (TransactionTransactionTypeEnum) {
    TransactionTransactionTypeEnum["Digital"] = "digital";
    TransactionTransactionTypeEnum["Place"] = "place";
    TransactionTransactionTypeEnum["Special"] = "special";
    TransactionTransactionTypeEnum["Unresolved"] = "unresolved";
})(TransactionTransactionTypeEnum = exports.TransactionTransactionTypeEnum || (exports.TransactionTransactionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TransactionPaymentChannelEnum;
(function (TransactionPaymentChannelEnum) {
    TransactionPaymentChannelEnum["Online"] = "online";
    TransactionPaymentChannelEnum["InStore"] = "in store";
    TransactionPaymentChannelEnum["Other"] = "other";
})(TransactionPaymentChannelEnum = exports.TransactionPaymentChannelEnum || (exports.TransactionPaymentChannelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TransactionAllOfPaymentChannelEnum;
(function (TransactionAllOfPaymentChannelEnum) {
    TransactionAllOfPaymentChannelEnum["Online"] = "online";
    TransactionAllOfPaymentChannelEnum["InStore"] = "in store";
    TransactionAllOfPaymentChannelEnum["Other"] = "other";
})(TransactionAllOfPaymentChannelEnum = exports.TransactionAllOfPaymentChannelEnum || (exports.TransactionAllOfPaymentChannelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TransactionBaseTransactionTypeEnum;
(function (TransactionBaseTransactionTypeEnum) {
    TransactionBaseTransactionTypeEnum["Digital"] = "digital";
    TransactionBaseTransactionTypeEnum["Place"] = "place";
    TransactionBaseTransactionTypeEnum["Special"] = "special";
    TransactionBaseTransactionTypeEnum["Unresolved"] = "unresolved";
})(TransactionBaseTransactionTypeEnum = exports.TransactionBaseTransactionTypeEnum || (exports.TransactionBaseTransactionTypeEnum = {}));
/**
 * An identifier classifying the transaction type.  This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.  `adjustment:` Bank adjustment  `atm:` Cash deposit or withdrawal via an automated teller machine  `bank charge:` Charge or fee levied by the institution  `bill payment`: Payment of a bill  `cash:` Cash deposit or withdrawal  `cashback:` Cash withdrawal while making a debit card purchase  `cheque:` Document ordering the payment of money to another person or organization  `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval  `interest:` Interest earned or incurred  `purchase:` Purchase made with a debit or credit card  `standing order:` Payment instructed by the account holder to a third party at a regular interval  `transfer:` Transfer of money between accounts
 * @export
 * @enum {string}
 */
var TransactionCode;
(function (TransactionCode) {
    TransactionCode["Adjustment"] = "adjustment";
    TransactionCode["Atm"] = "atm";
    TransactionCode["BankCharge"] = "bank charge";
    TransactionCode["BillPayment"] = "bill payment";
    TransactionCode["Cash"] = "cash";
    TransactionCode["Cashback"] = "cashback";
    TransactionCode["Cheque"] = "cheque";
    TransactionCode["DirectDebit"] = "direct debit";
    TransactionCode["Interest"] = "interest";
    TransactionCode["Purchase"] = "purchase";
    TransactionCode["StandingOrder"] = "standing order";
    TransactionCode["Transfer"] = "transfer";
    TransactionCode["Null"] = "null";
})(TransactionCode = exports.TransactionCode || (exports.TransactionCode = {}));
/**
 * The current status of the transaction stream.  `mature`: A mature recurring stream should have at least 3 transactions and happen on a regular cadence.  `early_detection`: When a recurring transaction first appears in the transaction history and before it fulfills the requirement of a mature stream, we set the status as early_detection.  `tombstoned`: An early_detection stream would be tombstoned if no further transactions were found at the next expected date.  `unknown`: A stream is assigned an unknown status when none of the other statuses are applicable.
 * @export
 * @enum {string}
 */
var TransactionStreamStatus;
(function (TransactionStreamStatus) {
    TransactionStreamStatus["Unknown"] = "UNKNOWN";
    TransactionStreamStatus["Mature"] = "MATURE";
    TransactionStreamStatus["EarlyDetection"] = "EARLY_DETECTION";
    TransactionStreamStatus["Tombstoned"] = "TOMBSTONED";
})(TransactionStreamStatus = exports.TransactionStreamStatus || (exports.TransactionStreamStatus = {}));
/**
 * Transaction field for which the rule is defined.
 * @export
 * @enum {string}
 */
var TransactionsRuleField;
(function (TransactionsRuleField) {
    TransactionsRuleField["TransactionId"] = "TRANSACTION_ID";
    TransactionsRuleField["Name"] = "NAME";
})(TransactionsRuleField = exports.TransactionsRuleField || (exports.TransactionsRuleField = {}));
/**
 * Transaction rule\'s match type. For TRANSACTION_ID field, EXACT_MATCH is available. Matches are case sensitive.
 * @export
 * @enum {string}
 */
var TransactionsRuleType;
(function (TransactionsRuleType) {
    TransactionsRuleType["ExactMatch"] = "EXACT_MATCH";
    TransactionsRuleType["SubstringMatch"] = "SUBSTRING_MATCH";
})(TransactionsRuleType = exports.TransactionsRuleType || (exports.TransactionsRuleType = {}));
/**
 *  A decision regarding the proposed transfer.  `approved` â€“ The proposed transfer has received the end user\'s consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.  `declined` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
 * @export
 * @enum {string}
 */
var TransferAuthorizationDecision;
(function (TransferAuthorizationDecision) {
    TransferAuthorizationDecision["Approved"] = "approved";
    TransferAuthorizationDecision["Declined"] = "declined";
})(TransferAuthorizationDecision = exports.TransferAuthorizationDecision || (exports.TransferAuthorizationDecision = {}));
/**
 * A code representing the rationale for approving or declining the proposed transfer. Possible values are:  `MANUALLY_VERIFIED_ITEM` â€“ Item created via same-day micro deposits, limited information available. Plaid will offer `approved` as a transaction decision.  `LOGIN_REQUIRED` â€“ Unable to collect the account information due to Item staleness. Can be rectified using Link in update mode. Plaid will offer `approved` as a transaction decision.  `ERROR` â€“ Unable to collect the account information due to an error. Plaid will offer `approved` as a transaction decision.  `NSF` â€“ Transaction likely to result in a return due to insufficient funds. Plaid will offer `declined` as a transaction decision.  `RISK` - Transaction is high-risk. Plaid will offer `declined` as a transaction decision.
 * @export
 * @enum {string}
 */
var TransferAuthorizationDecisionRationaleCode;
(function (TransferAuthorizationDecisionRationaleCode) {
    TransferAuthorizationDecisionRationaleCode["Nsf"] = "NSF";
    TransferAuthorizationDecisionRationaleCode["Risk"] = "RISK";
    TransferAuthorizationDecisionRationaleCode["ManuallyVerifiedItem"] = "MANUALLY_VERIFIED_ITEM";
    TransferAuthorizationDecisionRationaleCode["LoginRequired"] = "LOGIN_REQUIRED";
    TransferAuthorizationDecisionRationaleCode["Error"] = "ERROR";
})(TransferAuthorizationDecisionRationaleCode = exports.TransferAuthorizationDecisionRationaleCode || (exports.TransferAuthorizationDecisionRationaleCode = {}));
/**
 * Indicates whether the transfer is guaranteed by Plaid (Guaranteed ACH customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.
 * @export
 * @enum {string}
 */
var TransferAuthorizationGuaranteeDecision;
(function (TransferAuthorizationGuaranteeDecision) {
    TransferAuthorizationGuaranteeDecision["Guaranteed"] = "GUARANTEED";
    TransferAuthorizationGuaranteeDecision["NotGuaranteed"] = "NOT_GUARANTEED";
    TransferAuthorizationGuaranteeDecision["Null"] = "null";
})(TransferAuthorizationGuaranteeDecision = exports.TransferAuthorizationGuaranteeDecision || (exports.TransferAuthorizationGuaranteeDecision = {}));
/**
 * A code representing the reason Plaid declined to guarantee this transfer:  `RETURN_BANK`: The risk of a bank-initiated return (for example, an R01/NSF) is too high to guarantee this transfer.  `RETURN_CUSTOMER`: The risk of a customer-initiated return (for example, a R10/Unauthorized) is too high to guarantee this transfer.  `GUARANTEE_LIMIT_REACHED`: This transfer is low-risk, but Guaranteed ACH has exhausted an internal limit on the number or rate of guarantees that applies to this transfer.  `RISK_ESTIMATE_UNAVAILABLE`: A risk estimate is unavailable for this Item.
 * @export
 * @enum {string}
 */
var TransferAuthorizationGuaranteeDecisionRationaleCode;
(function (TransferAuthorizationGuaranteeDecisionRationaleCode) {
    TransferAuthorizationGuaranteeDecisionRationaleCode["ReturnBank"] = "RETURN_BANK";
    TransferAuthorizationGuaranteeDecisionRationaleCode["ReturnCustomer"] = "RETURN_CUSTOMER";
    TransferAuthorizationGuaranteeDecisionRationaleCode["GuaranteeLimitReached"] = "GUARANTEE_LIMIT_REACHED";
    TransferAuthorizationGuaranteeDecisionRationaleCode["RiskEstimateUnavailable"] = "RISK_ESTIMATE_UNAVAILABLE";
})(TransferAuthorizationGuaranteeDecisionRationaleCode = exports.TransferAuthorizationGuaranteeDecisionRationaleCode || (exports.TransferAuthorizationGuaranteeDecisionRationaleCode = {}));
/**
 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
 * @export
 * @enum {string}
 */
var TransferEventListTransferType;
(function (TransferEventListTransferType) {
    TransferEventListTransferType["Debit"] = "debit";
    TransferEventListTransferType["Credit"] = "credit";
    TransferEventListTransferType["Null"] = "null";
})(TransferEventListTransferType = exports.TransferEventListTransferType || (exports.TransferEventListTransferType = {}));
/**
 * The type of event that this transfer represents.  `pending`: A new transfer was created; it is in the pending state.  `cancelled`: The transfer was cancelled by the client.  `failed`: The transfer failed, no funds were moved.  `posted`: The transfer has been successfully submitted to the payment network.  `reversed`: A posted transfer was reversed.  `swept`: The transfer was swept to / from the sweep account.  `reverse_swept`: Due to the transfer reversing, funds were pulled from or pushed back to the sweep account.
 * @export
 * @enum {string}
 */
var TransferEventType;
(function (TransferEventType) {
    TransferEventType["Pending"] = "pending";
    TransferEventType["Cancelled"] = "cancelled";
    TransferEventType["Failed"] = "failed";
    TransferEventType["Posted"] = "posted";
    TransferEventType["Reversed"] = "reversed";
    TransferEventType["Swept"] = "swept";
    TransferEventType["ReverseSwept"] = "reverse_swept";
})(TransferEventType = exports.TransferEventType || (exports.TransferEventType = {}));
/**
 *  A decision regarding the proposed transfer.  `APPROVED` â€“ The proposed transfer has received the end user\'s consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.  `DECLINED` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
 * @export
 * @enum {string}
 */
var TransferIntentAuthorizationDecision;
(function (TransferIntentAuthorizationDecision) {
    TransferIntentAuthorizationDecision["Approved"] = "APPROVED";
    TransferIntentAuthorizationDecision["Declined"] = "DECLINED";
})(TransferIntentAuthorizationDecision = exports.TransferIntentAuthorizationDecision || (exports.TransferIntentAuthorizationDecision = {}));
/**
 * The direction of the flow of transfer funds.  - `PAYMENT` â€“Â Transfers funds from an end user\'s account to your business account.  - `DISBURSEMENT` â€“ Transfers funds from your business account to an end user\'s account.
 * @export
 * @enum {string}
 */
var TransferIntentCreateMode;
(function (TransferIntentCreateMode) {
    TransferIntentCreateMode["Payment"] = "PAYMENT";
    TransferIntentCreateMode["Disbursement"] = "DISBURSEMENT";
})(TransferIntentCreateMode = exports.TransferIntentCreateMode || (exports.TransferIntentCreateMode = {}));
/**
 * The status of the transfer intent.  - `PENDING` â€“Â The transfer intent is pending. - `SUCCEEDED` â€“ The transfer intent was successfully created. - `FAILED` â€“ The transfer intent was unable to be created.
 * @export
 * @enum {string}
 */
var TransferIntentStatus;
(function (TransferIntentStatus) {
    TransferIntentStatus["Pending"] = "PENDING";
    TransferIntentStatus["Succeeded"] = "SUCCEEDED";
    TransferIntentStatus["Failed"] = "FAILED";
})(TransferIntentStatus = exports.TransferIntentStatus || (exports.TransferIntentStatus = {}));
/**
 * The network or rails used for the transfer. Valid options are `ach` or `same-day-ach`.
 * @export
 * @enum {string}
 */
var TransferNetwork;
(function (TransferNetwork) {
    TransferNetwork["Ach"] = "ach";
    TransferNetwork["SameDayAch"] = "same-day-ach";
})(TransferNetwork = exports.TransferNetwork || (exports.TransferNetwork = {}));
/**
 * The status of the transfer.
 * @export
 * @enum {string}
 */
var TransferStatus;
(function (TransferStatus) {
    TransferStatus["Pending"] = "pending";
    TransferStatus["Posted"] = "posted";
    TransferStatus["Cancelled"] = "cancelled";
    TransferStatus["Failed"] = "failed";
    TransferStatus["Reversed"] = "reversed";
})(TransferStatus = exports.TransferStatus || (exports.TransferStatus = {}));
/**
 * The status of the sweep for the transfer. `unswept`: The transfer hasn\'t been swept yet. `swept`: The transfer was swept to the sweep account. `reverse_swept`: The transfer was reversed, funds were pulled back or pushed back to the sweep account. `null`: The transfer will never be swept (e.g. if the transfer is cancelled or reversed before being swept)
 * @export
 * @enum {string}
 */
var TransferSweepStatus;
(function (TransferSweepStatus) {
    TransferSweepStatus["Null"] = "null";
    TransferSweepStatus["Unswept"] = "unswept";
    TransferSweepStatus["Swept"] = "swept";
    TransferSweepStatus["ReverseSwept"] = "reverse_swept";
})(TransferSweepStatus = exports.TransferSweepStatus || (exports.TransferSweepStatus = {}));
/**
 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
 * @export
 * @enum {string}
 */
var TransferType;
(function (TransferType) {
    TransferType["Debit"] = "debit";
    TransferType["Credit"] = "credit";
})(TransferType = exports.TransferType || (exports.TransferType = {}));
/**
    * @export
    * @enum {string}
    */
var VerificationAttributeTypeEnum;
(function (VerificationAttributeTypeEnum) {
    VerificationAttributeTypeEnum["VerificationAttributeTypeUnknown"] = "VERIFICATION_ATTRIBUTE_TYPE_UNKNOWN";
    VerificationAttributeTypeEnum["VerificationAttributeTypeAmountMatch"] = "VERIFICATION_ATTRIBUTE_TYPE_AMOUNT_MATCH";
    VerificationAttributeTypeEnum["VerificationAttributeTypeDateMatch"] = "VERIFICATION_ATTRIBUTE_TYPE_DATE_MATCH";
    VerificationAttributeTypeEnum["VerificationAttributeTypeDateMismatch"] = "VERIFICATION_ATTRIBUTE_TYPE_DATE_MISMATCH";
    VerificationAttributeTypeEnum["VerificationAttributeTypeFileTampering"] = "VERIFICATION_ATTRIBUTE_TYPE_FILE_TAMPERING";
    VerificationAttributeTypeEnum["VerificationAttributeTypeDescriptionMatch"] = "VERIFICATION_ATTRIBUTE_TYPE_DESCRIPTION_MATCH";
    VerificationAttributeTypeEnum["VerificationAttributeTypeDescriptionMismatch"] = "VERIFICATION_ATTRIBUTE_TYPE_DESCRIPTION_MISMATCH";
    VerificationAttributeTypeEnum["VerificationAttributeTypeFirstNameMatch"] = "VERIFICATION_ATTRIBUTE_TYPE_FIRST_NAME_MATCH";
    VerificationAttributeTypeEnum["VerificationAttributeTypeFirstNameMismatch"] = "VERIFICATION_ATTRIBUTE_TYPE_FIRST_NAME_MISMATCH";
    VerificationAttributeTypeEnum["VerificationAttributeTypeLastNameMatch"] = "VERIFICATION_ATTRIBUTE_TYPE_LAST_NAME_MATCH";
    VerificationAttributeTypeEnum["VerificationAttributeTypeLastNameMismatch"] = "VERIFICATION_ATTRIBUTE_TYPE_LAST_NAME_MISMATCH";
    VerificationAttributeTypeEnum["Null"] = "null";
})(VerificationAttributeTypeEnum = exports.VerificationAttributeTypeEnum || (exports.VerificationAttributeTypeEnum = {}));
/**
 * The verification refresh status. One of the following:  `\"VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED\"` User presence is required to refresh an income verification. `\"VERIFICATION_REFRESH_SUCCESSFUL\"` The income verification refresh was successful. `\"VERIFICATION_REFRESH_NOT_FOUND\"` No new data was found after the income verification refresh.
 * @export
 * @enum {string}
 */
var VerificationRefreshStatus;
(function (VerificationRefreshStatus) {
    VerificationRefreshStatus["StatusUserPresenceRequired"] = "VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED";
    VerificationRefreshStatus["Successful"] = "VERIFICATION_REFRESH_SUCCESSFUL";
    VerificationRefreshStatus["NotFound"] = "VERIFICATION_REFRESH_NOT_FOUND";
})(VerificationRefreshStatus = exports.VerificationRefreshStatus || (exports.VerificationRefreshStatus = {}));
/**
 * The verification status. One of the following:  `\"VERIFIED\"`: The information was successfully verified.  `\"UNVERIFIED\"`: The verification has not yet been performed.  `\"NEEDS_INFO\"`: The verification was attempted but could not be completed due to missing information.  \"`UNABLE_TO_VERIFY`\": The verification was performed and the information could not be verified.  `\"UNKNOWN\"`: The verification status is unknown.
 * @export
 * @enum {string}
 */
var VerificationStatus;
(function (VerificationStatus) {
    VerificationStatus["Verified"] = "VERIFIED";
    VerificationStatus["Unverified"] = "UNVERIFIED";
    VerificationStatus["NeedsInfo"] = "NEEDS_INFO";
    VerificationStatus["UnableToVerify"] = "UNABLE_TO_VERIFY";
    VerificationStatus["Unknown"] = "UNKNOWN";
})(VerificationStatus = exports.VerificationStatus || (exports.VerificationStatus = {}));
/**
    * @export
    * @enum {string}
    */
var WalletTransactionTypeEnum;
(function (WalletTransactionTypeEnum) {
    WalletTransactionTypeEnum["Payout"] = "PAYOUT";
})(WalletTransactionTypeEnum = exports.WalletTransactionTypeEnum || (exports.WalletTransactionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var WalletTransactionAmountIsoCurrencyCodeEnum;
(function (WalletTransactionAmountIsoCurrencyCodeEnum) {
    WalletTransactionAmountIsoCurrencyCodeEnum["Gbp"] = "GBP";
})(WalletTransactionAmountIsoCurrencyCodeEnum = exports.WalletTransactionAmountIsoCurrencyCodeEnum || (exports.WalletTransactionAmountIsoCurrencyCodeEnum = {}));
/**
 * The status of the transaction.  `INITIATED`: This is the initial state of all transactions. It indicates that the transaction has been initiated and is currently being processed.  `EXECUTED`: The transaction has been successfully executed.  `FAILED`: The transaction failed to process successfully. This is a terminal status.  `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
 * @export
 * @enum {string}
 */
var WalletTransactionStatus;
(function (WalletTransactionStatus) {
    WalletTransactionStatus["Initiated"] = "INITIATED";
    WalletTransactionStatus["Executed"] = "EXECUTED";
    WalletTransactionStatus["Blocked"] = "BLOCKED";
    WalletTransactionStatus["Failed"] = "FAILED";
})(WalletTransactionStatus = exports.WalletTransactionStatus || (exports.WalletTransactionStatus = {}));
/**
    * @export
    * @enum {string}
    */
var WarningWarningCodeEnum;
(function (WarningWarningCodeEnum) {
    WarningWarningCodeEnum["OwnersUnavailable"] = "OWNERS_UNAVAILABLE";
})(WarningWarningCodeEnum = exports.WarningWarningCodeEnum || (exports.WarningWarningCodeEnum = {}));
/**
 * The following values for `webhook_type` are supported:  * `AUTH` * `HOLDINGS` * `INVESTMENTS_TRANSACTIONS` * `ITEM` * `LIABILITIES` * `TRANSACTIONS`
 * @export
 * @enum {string}
 */
var WebhookType;
(function (WebhookType) {
    WebhookType["Auth"] = "AUTH";
    WebhookType["Holdings"] = "HOLDINGS";
    WebhookType["InvestmentsTransactions"] = "INVESTMENTS_TRANSACTIONS";
    WebhookType["Item"] = "ITEM";
    WebhookType["Liabilities"] = "LIABILITIES";
    WebhookType["Transactions"] = "TRANSACTIONS";
})(WebhookType = exports.WebhookType || (exports.WebhookType = {}));
/**
 * PlaidApi - axios parameter creator
 * @export
 */
const PlaidApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet: (accountsBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'accountsBalanceGetRequest' is not null or undefined
            common_1.assertParamExists('accountsBalanceGet', 'accountsBalanceGetRequest', accountsBalanceGetRequest);
            const localVarPath = `/accounts/balance/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(accountsBalanceGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet: (accountsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'accountsGetRequest' is not null or undefined
            common_1.assertParamExists('accountsGet', 'accountsGetRequest', accountsGetRequest);
            const localVarPath = `/accounts/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(accountsGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet: (applicationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'applicationGetRequest' is not null or undefined
            common_1.assertParamExists('applicationGet', 'applicationGetRequest', applicationGetRequest);
            const localVarPath = `/application/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(applicationGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate: (assetReportAuditCopyCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportAuditCopyCreateRequest' is not null or undefined
            common_1.assertParamExists('assetReportAuditCopyCreate', 'assetReportAuditCopyCreateRequest', assetReportAuditCopyCreateRequest);
            const localVarPath = `/asset_report/audit_copy/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet: (assetReportAuditCopyGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportAuditCopyGetRequest' is not null or undefined
            common_1.assertParamExists('assetReportAuditCopyGet', 'assetReportAuditCopyGetRequest', assetReportAuditCopyGetRequest);
            const localVarPath = `/asset_report/audit_copy/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove: (assetReportAuditCopyRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportAuditCopyRemoveRequest' is not null or undefined
            common_1.assertParamExists('assetReportAuditCopyRemove', 'assetReportAuditCopyRemoveRequest', assetReportAuditCopyRemoveRequest);
            const localVarPath = `/asset_report/audit_copy/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyRemoveRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate: (assetReportCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportCreateRequest' is not null or undefined
            common_1.assertParamExists('assetReportCreate', 'assetReportCreateRequest', assetReportCreateRequest);
            const localVarPath = `/asset_report/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter: (assetReportFilterRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportFilterRequest' is not null or undefined
            common_1.assertParamExists('assetReportFilter', 'assetReportFilterRequest', assetReportFilterRequest);
            const localVarPath = `/asset_report/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportFilterRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet: (assetReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportGetRequest' is not null or undefined
            common_1.assertParamExists('assetReportGet', 'assetReportGetRequest', assetReportGetRequest);
            const localVarPath = `/asset_report/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet: (assetReportPDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportPDFGetRequest' is not null or undefined
            common_1.assertParamExists('assetReportPdfGet', 'assetReportPDFGetRequest', assetReportPDFGetRequest);
            const localVarPath = `/asset_report/pdf/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportPDFGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh: (assetReportRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportRefreshRequest' is not null or undefined
            common_1.assertParamExists('assetReportRefresh', 'assetReportRefreshRequest', assetReportRefreshRequest);
            const localVarPath = `/asset_report/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRefreshRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant access to an Asset Report to a third party, use the `/asset_report/relay/create` endpoint to create an `asset_relay_token` and then pass that token to the third party who needs access. Each third party has its own `secondary_client_id`, for example `ce5bd328dcd34123456`. You\'ll need to create a separate `asset_relay_token` for each third party to whom you want to grant access to the Report.
         * @summary Create an `asset_relay_token` to share an Asset Report with a partner client
         * @param {AssetReportRelayCreateRequest} assetReportRelayCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayCreate: (assetReportRelayCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportRelayCreateRequest' is not null or undefined
            common_1.assertParamExists('assetReportRelayCreate', 'assetReportRelayCreateRequest', assetReportRelayCreateRequest);
            const localVarPath = `/asset_report/relay/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRelayCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/asset_report/relay/get` allows third parties to get an Asset Report that was shared with them, using an `asset_relay_token` that was created by the report owner.
         * @summary Retrieve an Asset Report that was shared with you
         * @param {AssetReportRelayGetRequest} assetReportRelayGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayGet: (assetReportRelayGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportRelayGetRequest' is not null or undefined
            common_1.assertParamExists('assetReportRelayGet', 'assetReportRelayGetRequest', assetReportRelayGetRequest);
            const localVarPath = `/asset_report/relay/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRelayGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/asset_report/relay/refresh` endpoint allows third parties to refresh an Asset Report that was relayed to them, using an `asset_relay_token` that was created by the report owner. A new Asset Report will be created based on the old one, but with the most recent data available.
         * @summary Refresh a Relay Token\'s Asset Report
         * @param {AssetReportRelayRefreshRequest} assetReportRelayRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayRefresh: (assetReportRelayRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportRelayRefreshRequest' is not null or undefined
            common_1.assertParamExists('assetReportRelayRefresh', 'assetReportRelayRefreshRequest', assetReportRelayRefreshRequest);
            const localVarPath = `/asset_report/relay/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRelayRefreshRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/asset_report/relay/remove` endpoint allows you to invalidate an `asset_relay_token`, meaning the third party holding the token will no longer be able to use it to access the Asset Report to which the `asset_relay_token` gives access to. The Asset Report, Items associated with it, and other Asset Relay Tokens that provide access to the same Asset Report are not affected and will remain accessible after removing the given `asset_relay_token.
         * @summary Remove Asset Report Relay Token
         * @param {AssetReportRelayRemoveRequest} assetReportRelayRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayRemove: (assetReportRelayRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportRelayRemoveRequest' is not null or undefined
            common_1.assertParamExists('assetReportRelayRemove', 'assetReportRelayRemoveRequest', assetReportRelayRemoveRequest);
            const localVarPath = `/asset_report/relay/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRelayRemoveRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove: (assetReportRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetReportRemoveRequest' is not null or undefined
            common_1.assertParamExists('assetReportRemove', 'assetReportRemoveRequest', assetReportRemoveRequest);
            const localVarPath = `/asset_report/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRemoveRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet: (authGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authGetRequest' is not null or undefined
            common_1.assertParamExists('authGet', 'authGetRequest', authGetRequest);
            const localVarPath = `/auth/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(authGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet: (bankTransferBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bankTransferBalanceGetRequest' is not null or undefined
            common_1.assertParamExists('bankTransferBalanceGet', 'bankTransferBalanceGetRequest', bankTransferBalanceGetRequest);
            const localVarPath = `/bank_transfer/balance/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferBalanceGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel: (bankTransferCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bankTransferCancelRequest' is not null or undefined
            common_1.assertParamExists('bankTransferCancel', 'bankTransferCancelRequest', bankTransferCancelRequest);
            const localVarPath = `/bank_transfer/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferCancelRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate: (bankTransferCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bankTransferCreateRequest' is not null or undefined
            common_1.assertParamExists('bankTransferCreate', 'bankTransferCreateRequest', bankTransferCreateRequest);
            const localVarPath = `/bank_transfer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList: (bankTransferEventListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bankTransferEventListRequest' is not null or undefined
            common_1.assertParamExists('bankTransferEventList', 'bankTransferEventListRequest', bankTransferEventListRequest);
            const localVarPath = `/bank_transfer/event/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferEventListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync: (bankTransferEventSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bankTransferEventSyncRequest' is not null or undefined
            common_1.assertParamExists('bankTransferEventSync', 'bankTransferEventSyncRequest', bankTransferEventSyncRequest);
            const localVarPath = `/bank_transfer/event/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferEventSyncRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet: (bankTransferGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bankTransferGetRequest' is not null or undefined
            common_1.assertParamExists('bankTransferGet', 'bankTransferGetRequest', bankTransferGetRequest);
            const localVarPath = `/bank_transfer/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList: (bankTransferListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bankTransferListRequest' is not null or undefined
            common_1.assertParamExists('bankTransferList', 'bankTransferListRequest', bankTransferListRequest);
            const localVarPath = `/bank_transfer/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount: (bankTransferMigrateAccountRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bankTransferMigrateAccountRequest' is not null or undefined
            common_1.assertParamExists('bankTransferMigrateAccount', 'bankTransferMigrateAccountRequest', bankTransferMigrateAccountRequest);
            const localVarPath = `/bank_transfer/migrate_account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferMigrateAccountRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet: (bankTransferSweepGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bankTransferSweepGetRequest' is not null or undefined
            common_1.assertParamExists('bankTransferSweepGet', 'bankTransferSweepGetRequest', bankTransferSweepGetRequest);
            const localVarPath = `/bank_transfer/sweep/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferSweepGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList: (bankTransferSweepListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bankTransferSweepListRequest' is not null or undefined
            common_1.assertParamExists('bankTransferSweepList', 'bankTransferSweepListRequest', bankTransferSweepListRequest);
            const localVarPath = `/bank_transfer/sweep/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferSweepListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
         * @summary Get Categories
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            common_1.assertParamExists('categoriesGet', 'body', body);
            const localVarPath = `/categories/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken: (paymentInitiationPaymentTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationPaymentTokenCreateRequest' is not null or undefined
            common_1.assertParamExists('createPaymentToken', 'paymentInitiationPaymentTokenCreateRequest', paymentInitiationPaymentTokenCreateRequest);
            const localVarPath = `/payment_initiation/payment/token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentTokenCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet: (creditBankIncomeGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'creditBankIncomeGetRequest' is not null or undefined
            common_1.assertParamExists('creditBankIncomeGet', 'creditBankIncomeGetRequest', creditBankIncomeGetRequest);
            const localVarPath = `/credit/bank_income/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankIncomeGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/credit/employment/get` returns a list of employments through a user payroll that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet: (creditEmploymentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'creditEmploymentGetRequest' is not null or undefined
            common_1.assertParamExists('creditEmploymentGet', 'creditEmploymentGetRequest', creditEmploymentGetRequest);
            const localVarPath = `/credit/employment/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditEmploymentGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet: (creditPayrollIncomeGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'creditPayrollIncomeGetRequest' is not null or undefined
            common_1.assertParamExists('creditPayrollIncomeGet', 'creditPayrollIncomeGetRequest', creditPayrollIncomeGetRequest);
            const localVarPath = `/credit/payroll_income/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditPayrollIncomeGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck: (creditPayrollIncomePrecheckRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'creditPayrollIncomePrecheckRequest' is not null or undefined
            common_1.assertParamExists('creditPayrollIncomePrecheck', 'creditPayrollIncomePrecheckRequest', creditPayrollIncomePrecheckRequest);
            const localVarPath = `/credit/payroll_income/precheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditPayrollIncomePrecheckRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate: (depositSwitchAltCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'depositSwitchAltCreateRequest' is not null or undefined
            common_1.assertParamExists('depositSwitchAltCreate', 'depositSwitchAltCreateRequest', depositSwitchAltCreateRequest);
            const localVarPath = `/deposit_switch/alt/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchAltCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate: (depositSwitchCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'depositSwitchCreateRequest' is not null or undefined
            common_1.assertParamExists('depositSwitchCreate', 'depositSwitchCreateRequest', depositSwitchCreateRequest);
            const localVarPath = `/deposit_switch/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet: (depositSwitchGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'depositSwitchGetRequest' is not null or undefined
            common_1.assertParamExists('depositSwitchGet', 'depositSwitchGetRequest', depositSwitchGetRequest);
            const localVarPath = `/deposit_switch/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
         * @summary Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate: (depositSwitchTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'depositSwitchTokenCreateRequest' is not null or undefined
            common_1.assertParamExists('depositSwitchTokenCreate', 'depositSwitchTokenCreateRequest', depositSwitchTokenCreateRequest);
            const localVarPath = `/deposit_switch/token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchTokenCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch: (employersSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'employersSearchRequest' is not null or undefined
            common_1.assertParamExists('employersSearch', 'employersSearchRequest', employersSearchRequest);
            const localVarPath = `/employers/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(employersSearchRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet: (employmentVerificationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'employmentVerificationGetRequest' is not null or undefined
            common_1.assertParamExists('employmentVerificationGet', 'employmentVerificationGetRequest', employmentVerificationGetRequest);
            const localVarPath = `/employment/verification/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(employmentVerificationGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet: (identityGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'identityGetRequest' is not null or undefined
            common_1.assertParamExists('identityGet', 'identityGetRequest', identityGetRequest);
            const localVarPath = `/identity/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate: (incomeVerificationCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'incomeVerificationCreateRequest' is not null or undefined
            common_1.assertParamExists('incomeVerificationCreate', 'incomeVerificationCreateRequest', incomeVerificationCreateRequest);
            const localVarPath = `/income/verification/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload: (incomeVerificationDocumentsDownloadRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'incomeVerificationDocumentsDownloadRequest' is not null or undefined
            common_1.assertParamExists('incomeVerificationDocumentsDownload', 'incomeVerificationDocumentsDownloadRequest', incomeVerificationDocumentsDownloadRequest);
            const localVarPath = `/income/verification/documents/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationDocumentsDownloadRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet: (incomeVerificationPaystubsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'incomeVerificationPaystubsGetRequest' is not null or undefined
            common_1.assertParamExists('incomeVerificationPaystubsGet', 'incomeVerificationPaystubsGetRequest', incomeVerificationPaystubsGetRequest);
            const localVarPath = `/income/verification/paystubs/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationPaystubsGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck: (incomeVerificationPrecheckRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'incomeVerificationPrecheckRequest' is not null or undefined
            common_1.assertParamExists('incomeVerificationPrecheck', 'incomeVerificationPrecheckRequest', incomeVerificationPrecheckRequest);
            const localVarPath = `/income/verification/precheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationPrecheckRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/income/verification/refresh` refreshes a given income verification.
         * @summary (Deprecated) Refresh an income verification
         * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationRefresh: (incomeVerificationRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'incomeVerificationRefreshRequest' is not null or undefined
            common_1.assertParamExists('incomeVerificationRefresh', 'incomeVerificationRefreshRequest', incomeVerificationRefreshRequest);
            const localVarPath = `/income/verification/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationRefreshRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet: (requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'requestBody' is not null or undefined
            common_1.assertParamExists('incomeVerificationTaxformsGet', 'requestBody', requestBody);
            const localVarPath = `/income/verification/taxforms/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet: (institutionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'institutionsGetRequest' is not null or undefined
            common_1.assertParamExists('institutionsGet', 'institutionsGetRequest', institutionsGetRequest);
            const localVarPath = `/institutions/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById: (institutionsGetByIdRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'institutionsGetByIdRequest' is not null or undefined
            common_1.assertParamExists('institutionsGetById', 'institutionsGetByIdRequest', institutionsGetByIdRequest);
            const localVarPath = `/institutions/get_by_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsGetByIdRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch: (institutionsSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'institutionsSearchRequest' is not null or undefined
            common_1.assertParamExists('institutionsSearch', 'institutionsSearchRequest', institutionsSearchRequest);
            const localVarPath = `/institutions/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsSearchRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet: (investmentsHoldingsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'investmentsHoldingsGetRequest' is not null or undefined
            common_1.assertParamExists('investmentsHoldingsGet', 'investmentsHoldingsGetRequest', investmentsHoldingsGetRequest);
            const localVarPath = `/investments/holdings/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsHoldingsGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet: (investmentsTransactionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'investmentsTransactionsGetRequest' is not null or undefined
            common_1.assertParamExists('investmentsTransactionsGet', 'investmentsTransactionsGetRequest', investmentsTransactionsGetRequest);
            const localVarPath = `/investments/transactions/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsTransactionsGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate: (itemAccessTokenInvalidateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemAccessTokenInvalidateRequest' is not null or undefined
            common_1.assertParamExists('itemAccessTokenInvalidate', 'itemAccessTokenInvalidateRequest', itemAccessTokenInvalidateRequest);
            const localVarPath = `/item/access_token/invalidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemAccessTokenInvalidateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a userâ€™s connected applications
         * @summary List a userâ€™s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList: (itemApplicationListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemApplicationListRequest' is not null or undefined
            common_1.assertParamExists('itemApplicationList', 'itemApplicationListRequest', itemApplicationListRequest);
            const localVarPath = `/item/application/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemApplicationListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate: (itemApplicationScopesUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemApplicationScopesUpdateRequest' is not null or undefined
            common_1.assertParamExists('itemApplicationScopesUpdate', 'itemApplicationScopesUpdateRequest', itemApplicationScopesUpdateRequest);
            const localVarPath = `/item/application/scopes/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemApplicationScopesUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken: (itemPublicTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemPublicTokenCreateRequest' is not null or undefined
            common_1.assertParamExists('itemCreatePublicToken', 'itemPublicTokenCreateRequest', itemPublicTokenCreateRequest);
            const localVarPath = `/item/public_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemPublicTokenCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet: (itemGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemGetRequest' is not null or undefined
            common_1.assertParamExists('itemGet', 'itemGetRequest', itemGetRequest);
            const localVarPath = `/item/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport: (itemImportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemImportRequest' is not null or undefined
            common_1.assertParamExists('itemImport', 'itemImportRequest', itemImportRequest);
            const localVarPath = `/item/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemImportRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange: (itemPublicTokenExchangeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemPublicTokenExchangeRequest' is not null or undefined
            common_1.assertParamExists('itemPublicTokenExchange', 'itemPublicTokenExchangeRequest', itemPublicTokenExchangeRequest);
            const localVarPath = `/item/public_token/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemPublicTokenExchangeRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove: (itemRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemRemoveRequest' is not null or undefined
            common_1.assertParamExists('itemRemove', 'itemRemoveRequest', itemRemoveRequest);
            const localVarPath = `/item/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemRemoveRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate: (itemWebhookUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemWebhookUpdateRequest' is not null or undefined
            common_1.assertParamExists('itemWebhookUpdate', 'itemWebhookUpdateRequest', itemWebhookUpdateRequest);
            const localVarPath = `/item/webhook/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemWebhookUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet: (liabilitiesGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'liabilitiesGetRequest' is not null or undefined
            common_1.assertParamExists('liabilitiesGet', 'liabilitiesGetRequest', liabilitiesGetRequest);
            const localVarPath = `/liabilities/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(liabilitiesGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate: (linkTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'linkTokenCreateRequest' is not null or undefined
            common_1.assertParamExists('linkTokenCreate', 'linkTokenCreateRequest', linkTokenCreateRequest);
            const localVarPath = `/link/token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkTokenCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet: (linkTokenGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'linkTokenGetRequest' is not null or undefined
            common_1.assertParamExists('linkTokenGet', 'linkTokenGetRequest', linkTokenGetRequest);
            const localVarPath = `/link/token/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkTokenGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate: (paymentInitiationConsentCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationConsentCreateRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationConsentCreate', 'paymentInitiationConsentCreateRequest', paymentInitiationConsentCreateRequest);
            const localVarPath = `/payment_initiation/consent/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet: (paymentInitiationConsentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationConsentGetRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationConsentGet', 'paymentInitiationConsentGetRequest', paymentInitiationConsentGetRequest);
            const localVarPath = `/payment_initiation/consent/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute: (paymentInitiationConsentPaymentExecuteRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationConsentPaymentExecuteRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationConsentPaymentExecute', 'paymentInitiationConsentPaymentExecuteRequest', paymentInitiationConsentPaymentExecuteRequest);
            const localVarPath = `/payment_initiation/consent/payment/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentPaymentExecuteRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke: (paymentInitiationConsentRevokeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationConsentRevokeRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationConsentRevoke', 'paymentInitiationConsentRevokeRequest', paymentInitiationConsentRevokeRequest);
            const localVarPath = `/payment_initiation/consent/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentRevokeRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate: (paymentInitiationPaymentCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationPaymentCreateRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationPaymentCreate', 'paymentInitiationPaymentCreateRequest', paymentInitiationPaymentCreateRequest);
            const localVarPath = `/payment_initiation/payment/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet: (paymentInitiationPaymentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationPaymentGetRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationPaymentGet', 'paymentInitiationPaymentGetRequest', paymentInitiationPaymentGetRequest);
            const localVarPath = `/payment_initiation/payment/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList: (paymentInitiationPaymentListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationPaymentListRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationPaymentList', 'paymentInitiationPaymentListRequest', paymentInitiationPaymentListRequest);
            const localVarPath = `/payment_initiation/payment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\'s account.
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse: (paymentInitiationPaymentReverseRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationPaymentReverseRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationPaymentReverse', 'paymentInitiationPaymentReverseRequest', paymentInitiationPaymentReverseRequest);
            const localVarPath = `/payment_initiation/payment/reverse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentReverseRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate: (paymentInitiationRecipientCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationRecipientCreateRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationRecipientCreate', 'paymentInitiationRecipientCreateRequest', paymentInitiationRecipientCreateRequest);
            const localVarPath = `/payment_initiation/recipient/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet: (paymentInitiationRecipientGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationRecipientGetRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationRecipientGet', 'paymentInitiationRecipientGetRequest', paymentInitiationRecipientGetRequest);
            const localVarPath = `/payment_initiation/recipient/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList: (paymentInitiationRecipientListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentInitiationRecipientListRequest' is not null or undefined
            common_1.assertParamExists('paymentInitiationRecipientList', 'paymentInitiationRecipientListRequest', paymentInitiationRecipientListRequest);
            const localVarPath = `/payment_initiation/recipient/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate: (processorApexProcessorTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'processorApexProcessorTokenCreateRequest' is not null or undefined
            common_1.assertParamExists('processorApexProcessorTokenCreate', 'processorApexProcessorTokenCreateRequest', processorApexProcessorTokenCreateRequest);
            const localVarPath = `/processor/apex/processor_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorApexProcessorTokenCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet: (processorAuthGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'processorAuthGetRequest' is not null or undefined
            common_1.assertParamExists('processorAuthGet', 'processorAuthGetRequest', processorAuthGetRequest);
            const localVarPath = `/processor/auth/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorAuthGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet: (processorBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'processorBalanceGetRequest' is not null or undefined
            common_1.assertParamExists('processorBalanceGet', 'processorBalanceGetRequest', processorBalanceGetRequest);
            const localVarPath = `/processor/balance/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorBalanceGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate: (processorBankTransferCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'processorBankTransferCreateRequest' is not null or undefined
            common_1.assertParamExists('processorBankTransferCreate', 'processorBankTransferCreateRequest', processorBankTransferCreateRequest);
            const localVarPath = `/processor/bank_transfer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorBankTransferCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet: (processorIdentityGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'processorIdentityGetRequest' is not null or undefined
            common_1.assertParamExists('processorIdentityGet', 'processorIdentityGetRequest', processorIdentityGetRequest);
            const localVarPath = `/processor/identity/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorIdentityGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/). Bank account tokens can also be revoked, using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate: (processorStripeBankAccountTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'processorStripeBankAccountTokenCreateRequest' is not null or undefined
            common_1.assertParamExists('processorStripeBankAccountTokenCreate', 'processorStripeBankAccountTokenCreateRequest', processorStripeBankAccountTokenCreateRequest);
            const localVarPath = `/processor/stripe/bank_account_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorStripeBankAccountTokenCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Processor tokens can also be revoked, using `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate: (processorTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'processorTokenCreateRequest' is not null or undefined
            common_1.assertParamExists('processorTokenCreate', 'processorTokenCreateRequest', processorTokenCreateRequest);
            const localVarPath = `/processor/token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTokenCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook: (sandboxBankTransferFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxBankTransferFireWebhookRequest' is not null or undefined
            common_1.assertParamExists('sandboxBankTransferFireWebhook', 'sandboxBankTransferFireWebhookRequest', sandboxBankTransferFireWebhookRequest);
            const localVarPath = `/sandbox/bank_transfer/fire_webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxBankTransferFireWebhookRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate: (sandboxBankTransferSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxBankTransferSimulateRequest' is not null or undefined
            common_1.assertParamExists('sandboxBankTransferSimulate', 'sandboxBankTransferSimulateRequest', sandboxBankTransferSimulateRequest);
            const localVarPath = `/sandbox/bank_transfer/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxBankTransferSimulateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook: (sandboxIncomeFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxIncomeFireWebhookRequest' is not null or undefined
            common_1.assertParamExists('sandboxIncomeFireWebhook', 'sandboxIncomeFireWebhookRequest', sandboxIncomeFireWebhookRequest);
            const localVarPath = `/sandbox/income/fire_webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxIncomeFireWebhookRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks: `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development\'
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook: (sandboxItemFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxItemFireWebhookRequest' is not null or undefined
            common_1.assertParamExists('sandboxItemFireWebhook', 'sandboxItemFireWebhookRequest', sandboxItemFireWebhookRequest);
            const localVarPath = `/sandbox/item/fire_webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemFireWebhookRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin: (sandboxItemResetLoginRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxItemResetLoginRequest' is not null or undefined
            common_1.assertParamExists('sandboxItemResetLogin', 'sandboxItemResetLoginRequest', sandboxItemResetLoginRequest);
            const localVarPath = `/sandbox/item/reset_login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemResetLoginRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus: (sandboxItemSetVerificationStatusRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxItemSetVerificationStatusRequest' is not null or undefined
            common_1.assertParamExists('sandboxItemSetVerificationStatus', 'sandboxItemSetVerificationStatusRequest', sandboxItemSetVerificationStatusRequest);
            const localVarPath = `/sandbox/item/set_verification_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemSetVerificationStatusRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts: (sandboxOauthSelectAccountsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxOauthSelectAccountsRequest' is not null or undefined
            common_1.assertParamExists('sandboxOauthSelectAccounts', 'sandboxOauthSelectAccountsRequest', sandboxOauthSelectAccountsRequest);
            const localVarPath = `/sandbox/oauth/select_accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxOauthSelectAccountsRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate: (sandboxProcessorTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxProcessorTokenCreateRequest' is not null or undefined
            common_1.assertParamExists('sandboxProcessorTokenCreate', 'sandboxProcessorTokenCreateRequest', sandboxProcessorTokenCreateRequest);
            const localVarPath = `/sandbox/processor_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxProcessorTokenCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate: (sandboxPublicTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxPublicTokenCreateRequest' is not null or undefined
            common_1.assertParamExists('sandboxPublicTokenCreate', 'sandboxPublicTokenCreateRequest', sandboxPublicTokenCreateRequest);
            const localVarPath = `/sandbox/public_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxPublicTokenCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook: (sandboxTransferFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxTransferFireWebhookRequest' is not null or undefined
            common_1.assertParamExists('sandboxTransferFireWebhook', 'sandboxTransferFireWebhookRequest', sandboxTransferFireWebhookRequest);
            const localVarPath = `/sandbox/transfer/fire_webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferFireWebhookRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate: (sandboxTransferRepaymentSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxTransferRepaymentSimulateRequest' is not null or undefined
            common_1.assertParamExists('sandboxTransferRepaymentSimulate', 'sandboxTransferRepaymentSimulateRequest', sandboxTransferRepaymentSimulateRequest);
            const localVarPath = `/sandbox/transfer/repayment/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferRepaymentSimulateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate: (sandboxTransferSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxTransferSimulateRequest' is not null or undefined
            common_1.assertParamExists('sandboxTransferSimulate', 'sandboxTransferSimulateRequest', sandboxTransferSimulateRequest);
            const localVarPath = `/sandbox/transfer/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferSimulateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate: (sandboxTransferSweepSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sandboxTransferSweepSimulateRequest' is not null or undefined
            common_1.assertParamExists('sandboxTransferSweepSimulate', 'sandboxTransferSweepSimulateRequest', sandboxTransferSweepSimulateRequest);
            const localVarPath = `/sandbox/transfer/sweep/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferSweepSimulateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport: (signalDecisionReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'signalDecisionReportRequest' is not null or undefined
            common_1.assertParamExists('signalDecisionReport', 'signalDecisionReportRequest', signalDecisionReportRequest);
            const localVarPath = `/signal/decision/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalDecisionReportRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate: (signalEvaluateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'signalEvaluateRequest' is not null or undefined
            common_1.assertParamExists('signalEvaluate', 'signalEvaluateRequest', signalEvaluateRequest);
            const localVarPath = `/signal/evaluate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalEvaluateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport: (signalReturnReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'signalReturnReportRequest' is not null or undefined
            common_1.assertParamExists('signalReturnReport', 'signalReturnReportRequest', signalReturnReportRequest);
            const localVarPath = `/signal/return/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalReturnReportRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The \'/beta/transactions/v1/enhance\' endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance: (transactionsEnhanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transactionsEnhanceGetRequest' is not null or undefined
            common_1.assertParamExists('transactionsEnhance', 'transactionsEnhanceGetRequest', transactionsEnhanceGetRequest);
            const localVarPath = `/beta/transactions/v1/enhance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsEnhanceGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet: (transactionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transactionsGetRequest' is not null or undefined
            common_1.assertParamExists('transactionsGet', 'transactionsGetRequest', transactionsGetRequest);
            const localVarPath = `/transactions/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Get streams of recurring transactions
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet: (transactionsRecurringGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transactionsRecurringGetRequest' is not null or undefined
            common_1.assertParamExists('transactionsRecurringGet', 'transactionsRecurringGetRequest', transactionsRecurringGetRequest);
            const localVarPath = `/transactions/recurring/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRecurringGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh: (transactionsRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transactionsRefreshRequest' is not null or undefined
            common_1.assertParamExists('transactionsRefresh', 'transactionsRefreshRequest', transactionsRefreshRequest);
            const localVarPath = `/transactions/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRefreshRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transactions/rules/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate: (transactionsRulesCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transactionsRulesCreateRequest' is not null or undefined
            common_1.assertParamExists('transactionsRulesCreate', 'transactionsRulesCreateRequest', transactionsRulesCreateRequest);
            const localVarPath = `/beta/transactions/rules/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRulesCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transactions/rules/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList: (transactionsRulesListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transactionsRulesListRequest' is not null or undefined
            common_1.assertParamExists('transactionsRulesList', 'transactionsRulesListRequest', transactionsRulesListRequest);
            const localVarPath = `/beta/transactions/rules/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRulesListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transactions/rules/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove: (transactionsRulesRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transactionsRulesRemoveRequest' is not null or undefined
            common_1.assertParamExists('transactionsRulesRemove', 'transactionsRulesRemoveRequest', transactionsRulesRemoveRequest);
            const localVarPath = `/beta/transactions/rules/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRulesRemoveRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync: (transactionsSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transactionsSyncRequest' is not null or undefined
            common_1.assertParamExists('transactionsSync', 'transactionsSyncRequest', transactionsSyncRequest);
            const localVarPath = `/transactions/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsSyncRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate: (transferAuthorizationCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferAuthorizationCreateRequest' is not null or undefined
            common_1.assertParamExists('transferAuthorizationCreate', 'transferAuthorizationCreateRequest', transferAuthorizationCreateRequest);
            const localVarPath = `/transfer/authorization/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferAuthorizationCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel: (transferCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferCancelRequest' is not null or undefined
            common_1.assertParamExists('transferCancel', 'transferCancelRequest', transferCancelRequest);
            const localVarPath = `/transfer/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCancelRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer.
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate: (transferCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferCreateRequest' is not null or undefined
            common_1.assertParamExists('transferCreate', 'transferCreateRequest', transferCreateRequest);
            const localVarPath = `/transfer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList: (transferEventListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferEventListRequest' is not null or undefined
            common_1.assertParamExists('transferEventList', 'transferEventListRequest', transferEventListRequest);
            const localVarPath = `/transfer/event/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferEventListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync: (transferEventSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferEventSyncRequest' is not null or undefined
            common_1.assertParamExists('transferEventSync', 'transferEventSyncRequest', transferEventSyncRequest);
            const localVarPath = `/transfer/event/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferEventSyncRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet: (transferGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferGetRequest' is not null or undefined
            common_1.assertParamExists('transferGet', 'transferGetRequest', transferGetRequest);
            const localVarPath = `/transfer/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate: (transferIntentCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferIntentCreateRequest' is not null or undefined
            common_1.assertParamExists('transferIntentCreate', 'transferIntentCreateRequest', transferIntentCreateRequest);
            const localVarPath = `/transfer/intent/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferIntentCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet: (requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'requestBody' is not null or undefined
            common_1.assertParamExists('transferIntentGet', 'requestBody', requestBody);
            const localVarPath = `/transfer/intent/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList: (transferListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferListRequest' is not null or undefined
            common_1.assertParamExists('transferList', 'transferListRequest', transferListRequest);
            const localVarPath = `/transfer/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount: (transferMigrateAccountRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferMigrateAccountRequest' is not null or undefined
            common_1.assertParamExists('transferMigrateAccount', 'transferMigrateAccountRequest', transferMigrateAccountRequest);
            const localVarPath = `/transfer/migrate_account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferMigrateAccountRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList: (transferRepaymentListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferRepaymentListRequest' is not null or undefined
            common_1.assertParamExists('transferRepaymentList', 'transferRepaymentListRequest', transferRepaymentListRequest);
            const localVarPath = `/transfer/repayment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRepaymentListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList: (transferRepaymentReturnListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferRepaymentReturnListRequest' is not null or undefined
            common_1.assertParamExists('transferRepaymentReturnList', 'transferRepaymentReturnListRequest', transferRepaymentReturnListRequest);
            const localVarPath = `/transfer/repayment/return/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRepaymentReturnListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet: (transferSweepGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferSweepGetRequest' is not null or undefined
            common_1.assertParamExists('transferSweepGet', 'transferSweepGetRequest', transferSweepGetRequest);
            const localVarPath = `/transfer/sweep/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferSweepGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList: (transferSweepListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transferSweepListRequest' is not null or undefined
            common_1.assertParamExists('transferSweepList', 'transferSweepListRequest', transferSweepListRequest);
            const localVarPath = `/transfer/sweep/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferSweepListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate: (userCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userCreateRequest' is not null or undefined
            common_1.assertParamExists('userCreate', 'userCreateRequest', userCreateRequest);
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet: (walletGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'walletGetRequest' is not null or undefined
            common_1.assertParamExists('walletGet', 'walletGetRequest', walletGetRequest);
            const localVarPath = `/wallet/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute: (walletTransactionExecuteRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'walletTransactionExecuteRequest' is not null or undefined
            common_1.assertParamExists('walletTransactionExecute', 'walletTransactionExecuteRequest', walletTransactionExecuteRequest);
            const localVarPath = `/wallet/transaction/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletTransactionExecuteRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionsListRequest} walletTransactionsListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionsList: (walletTransactionsListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'walletTransactionsListRequest' is not null or undefined
            common_1.assertParamExists('walletTransactionsList', 'walletTransactionsListRequest', walletTransactionsListRequest);
            const localVarPath = `/wallet/transactions/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletTransactionsListRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet: (webhookVerificationKeyGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'webhookVerificationKeyGetRequest' is not null or undefined
            common_1.assertParamExists('webhookVerificationKeyGet', 'webhookVerificationKeyGetRequest', webhookVerificationKeyGetRequest);
            const localVarPath = `/webhook_verification_key/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication clientId required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
            // authentication plaidVersion required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
            // authentication secret required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(webhookVerificationKeyGetRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PlaidApiAxiosParamCreator = PlaidApiAxiosParamCreator;
/**
 * PlaidApi - functional programming interface
 * @export
 */
const PlaidApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.PlaidApiAxiosParamCreator(configuration);
    return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet(accountsBalanceGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.accountsBalanceGet(accountsBalanceGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(accountsGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.accountsGet(accountsGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet(applicationGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.applicationGet(applicationGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate(assetReportCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportCreate(assetReportCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter(assetReportFilterRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportFilter(assetReportFilterRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet(assetReportGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportGet(assetReportGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet(assetReportPDFGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportPdfGet(assetReportPDFGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh(assetReportRefreshRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRefresh(assetReportRefreshRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant access to an Asset Report to a third party, use the `/asset_report/relay/create` endpoint to create an `asset_relay_token` and then pass that token to the third party who needs access. Each third party has its own `secondary_client_id`, for example `ce5bd328dcd34123456`. You\'ll need to create a separate `asset_relay_token` for each third party to whom you want to grant access to the Report.
         * @summary Create an `asset_relay_token` to share an Asset Report with a partner client
         * @param {AssetReportRelayCreateRequest} assetReportRelayCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayCreate(assetReportRelayCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRelayCreate(assetReportRelayCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/asset_report/relay/get` allows third parties to get an Asset Report that was shared with them, using an `asset_relay_token` that was created by the report owner.
         * @summary Retrieve an Asset Report that was shared with you
         * @param {AssetReportRelayGetRequest} assetReportRelayGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayGet(assetReportRelayGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRelayGet(assetReportRelayGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/asset_report/relay/refresh` endpoint allows third parties to refresh an Asset Report that was relayed to them, using an `asset_relay_token` that was created by the report owner. A new Asset Report will be created based on the old one, but with the most recent data available.
         * @summary Refresh a Relay Token\'s Asset Report
         * @param {AssetReportRelayRefreshRequest} assetReportRelayRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayRefresh(assetReportRelayRefreshRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRelayRefresh(assetReportRelayRefreshRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/asset_report/relay/remove` endpoint allows you to invalidate an `asset_relay_token`, meaning the third party holding the token will no longer be able to use it to access the Asset Report to which the `asset_relay_token` gives access to. The Asset Report, Items associated with it, and other Asset Relay Tokens that provide access to the same Asset Report are not affected and will remain accessible after removing the given `asset_relay_token.
         * @summary Remove Asset Report Relay Token
         * @param {AssetReportRelayRemoveRequest} assetReportRelayRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayRemove(assetReportRelayRemoveRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRelayRemove(assetReportRelayRemoveRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove(assetReportRemoveRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRemove(assetReportRemoveRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet(authGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authGet(authGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferBalanceGet(bankTransferBalanceGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel(bankTransferCancelRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferCancel(bankTransferCancelRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate(bankTransferCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferCreate(bankTransferCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList(bankTransferEventListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferEventList(bankTransferEventListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync(bankTransferEventSyncRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferEventSync(bankTransferEventSyncRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet(bankTransferGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferGet(bankTransferGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList(bankTransferListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferList(bankTransferListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet(bankTransferSweepGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferSweepGet(bankTransferSweepGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList(bankTransferSweepListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferSweepList(bankTransferSweepListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
         * @summary Get Categories
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.categoriesGet(body, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet(creditBankIncomeGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankIncomeGet(creditBankIncomeGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/credit/employment/get` returns a list of employments through a user payroll that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet(creditEmploymentGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.creditEmploymentGet(creditEmploymentGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchAltCreate(depositSwitchAltCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate(depositSwitchCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchCreate(depositSwitchCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet(depositSwitchGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchGet(depositSwitchGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
         * @summary Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch(employersSearchRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.employersSearch(employersSearchRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet(employmentVerificationGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.employmentVerificationGet(employmentVerificationGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(identityGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.identityGet(identityGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate(incomeVerificationCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationCreate(incomeVerificationCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/income/verification/refresh` refreshes a given income verification.
         * @summary (Deprecated) Refresh an income verification
         * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationRefresh(incomeVerificationRefreshRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationRefresh(incomeVerificationRefreshRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet(requestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationTaxformsGet(requestBody, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet(institutionsGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsGet(institutionsGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById(institutionsGetByIdRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsGetById(institutionsGetByIdRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch(institutionsSearchRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsSearch(institutionsSearchRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsHoldingsGet(investmentsHoldingsGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsTransactionsGet(investmentsTransactionsGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a userâ€™s connected applications
         * @summary List a userâ€™s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList(itemApplicationListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.itemApplicationList(itemApplicationListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken(itemPublicTokenCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.itemCreatePublicToken(itemPublicTokenCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet(itemGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.itemGet(itemGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport(itemImportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.itemImport(itemImportRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove(itemRemoveRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.itemRemove(itemRemoveRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate(itemWebhookUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.itemWebhookUpdate(itemWebhookUpdateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet(liabilitiesGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.liabilitiesGet(liabilitiesGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate(linkTokenCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.linkTokenCreate(linkTokenCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet(linkTokenGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.linkTokenGet(linkTokenGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\'s account.
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet(processorAuthGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.processorAuthGet(processorAuthGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet(processorBalanceGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.processorBalanceGet(processorBalanceGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate(processorBankTransferCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.processorBankTransferCreate(processorBankTransferCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet(processorIdentityGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.processorIdentityGet(processorIdentityGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/). Bank account tokens can also be revoked, using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Processor tokens can also be revoked, using `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate(processorTokenCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTokenCreate(processorTokenCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks: `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development\'
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemResetLogin(sandboxItemResetLoginRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferSimulate(sandboxTransferSimulateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport(signalDecisionReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.signalDecisionReport(signalDecisionReportRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate(signalEvaluateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.signalEvaluate(signalEvaluateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport(signalReturnReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.signalReturnReport(signalReturnReportRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The \'/beta/transactions/v1/enhance\' endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance(transactionsEnhanceGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsEnhance(transactionsEnhanceGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(transactionsGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsGet(transactionsGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Get streams of recurring transactions
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet(transactionsRecurringGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRecurringGet(transactionsRecurringGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh(transactionsRefreshRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRefresh(transactionsRefreshRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transactions/rules/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate(transactionsRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRulesCreate(transactionsRulesCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transactions/rules/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList(transactionsRulesListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRulesList(transactionsRulesListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transactions/rules/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove(transactionsRulesRemoveRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRulesRemove(transactionsRulesRemoveRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync(transactionsSyncRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsSync(transactionsSyncRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferAuthorizationCreate(transferAuthorizationCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel(transferCancelRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCancel(transferCancelRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer.
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate(transferCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCreate(transferCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList(transferEventListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferEventList(transferEventListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync(transferEventSyncRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferEventSync(transferEventSyncRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet(transferGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferGet(transferGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate(transferIntentCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferIntentCreate(transferIntentCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet(requestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferIntentGet(requestBody, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList(transferListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferList(transferListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount(transferMigrateAccountRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferMigrateAccount(transferMigrateAccountRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList(transferRepaymentListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRepaymentList(transferRepaymentListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRepaymentReturnList(transferRepaymentReturnListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet(transferSweepGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferSweepGet(transferSweepGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList(transferSweepListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferSweepList(transferSweepListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate(userCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userCreate(userCreateRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet(walletGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.walletGet(walletGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute(walletTransactionExecuteRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.walletTransactionExecute(walletTransactionExecuteRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionsListRequest} walletTransactionsListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionsList(walletTransactionsListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.walletTransactionsList(walletTransactionsListRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.PlaidApiFp = PlaidApiFp;
/**
 * PlaidApi - factory interface
 * @export
 */
const PlaidApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.PlaidApiFp(configuration);
    return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet(accountsBalanceGetRequest, options) {
            return localVarFp.accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(accountsGetRequest, options) {
            return localVarFp.accountsGet(accountsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet(applicationGetRequest, options) {
            return localVarFp.applicationGet(applicationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {
            return localVarFp.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {
            return localVarFp.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {
            return localVarFp.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate(assetReportCreateRequest, options) {
            return localVarFp.assetReportCreate(assetReportCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter(assetReportFilterRequest, options) {
            return localVarFp.assetReportFilter(assetReportFilterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet(assetReportGetRequest, options) {
            return localVarFp.assetReportGet(assetReportGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet(assetReportPDFGetRequest, options) {
            return localVarFp.assetReportPdfGet(assetReportPDFGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh(assetReportRefreshRequest, options) {
            return localVarFp.assetReportRefresh(assetReportRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant access to an Asset Report to a third party, use the `/asset_report/relay/create` endpoint to create an `asset_relay_token` and then pass that token to the third party who needs access. Each third party has its own `secondary_client_id`, for example `ce5bd328dcd34123456`. You\'ll need to create a separate `asset_relay_token` for each third party to whom you want to grant access to the Report.
         * @summary Create an `asset_relay_token` to share an Asset Report with a partner client
         * @param {AssetReportRelayCreateRequest} assetReportRelayCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayCreate(assetReportRelayCreateRequest, options) {
            return localVarFp.assetReportRelayCreate(assetReportRelayCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/asset_report/relay/get` allows third parties to get an Asset Report that was shared with them, using an `asset_relay_token` that was created by the report owner.
         * @summary Retrieve an Asset Report that was shared with you
         * @param {AssetReportRelayGetRequest} assetReportRelayGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayGet(assetReportRelayGetRequest, options) {
            return localVarFp.assetReportRelayGet(assetReportRelayGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/relay/refresh` endpoint allows third parties to refresh an Asset Report that was relayed to them, using an `asset_relay_token` that was created by the report owner. A new Asset Report will be created based on the old one, but with the most recent data available.
         * @summary Refresh a Relay Token\'s Asset Report
         * @param {AssetReportRelayRefreshRequest} assetReportRelayRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayRefresh(assetReportRelayRefreshRequest, options) {
            return localVarFp.assetReportRelayRefresh(assetReportRelayRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/relay/remove` endpoint allows you to invalidate an `asset_relay_token`, meaning the third party holding the token will no longer be able to use it to access the Asset Report to which the `asset_relay_token` gives access to. The Asset Report, Items associated with it, and other Asset Relay Tokens that provide access to the same Asset Report are not affected and will remain accessible after removing the given `asset_relay_token.
         * @summary Remove Asset Report Relay Token
         * @param {AssetReportRelayRemoveRequest} assetReportRelayRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRelayRemove(assetReportRelayRemoveRequest, options) {
            return localVarFp.assetReportRelayRemove(assetReportRelayRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove(assetReportRemoveRequest, options) {
            return localVarFp.assetReportRemove(assetReportRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet(authGetRequest, options) {
            return localVarFp.authGet(authGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {
            return localVarFp.bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel(bankTransferCancelRequest, options) {
            return localVarFp.bankTransferCancel(bankTransferCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate(bankTransferCreateRequest, options) {
            return localVarFp.bankTransferCreate(bankTransferCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList(bankTransferEventListRequest, options) {
            return localVarFp.bankTransferEventList(bankTransferEventListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync(bankTransferEventSyncRequest, options) {
            return localVarFp.bankTransferEventSync(bankTransferEventSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet(bankTransferGetRequest, options) {
            return localVarFp.bankTransferGet(bankTransferGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList(bankTransferListRequest, options) {
            return localVarFp.bankTransferList(bankTransferListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {
            return localVarFp.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet(bankTransferSweepGetRequest, options) {
            return localVarFp.bankTransferSweepGet(bankTransferSweepGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList(bankTransferSweepListRequest, options) {
            return localVarFp.bankTransferSweepList(bankTransferSweepListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
         * @summary Get Categories
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(body, options) {
            return localVarFp.categoriesGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {
            return localVarFp.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet(creditBankIncomeGetRequest, options) {
            return localVarFp.creditBankIncomeGet(creditBankIncomeGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/employment/get` returns a list of employments through a user payroll that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet(creditEmploymentGetRequest, options) {
            return localVarFp.creditEmploymentGet(creditEmploymentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options) {
            return localVarFp.creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options) {
            return localVarFp.creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {
            return localVarFp.depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate(depositSwitchCreateRequest, options) {
            return localVarFp.depositSwitchCreate(depositSwitchCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet(depositSwitchGetRequest, options) {
            return localVarFp.depositSwitchGet(depositSwitchGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
         * @summary Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {
            return localVarFp.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch(employersSearchRequest, options) {
            return localVarFp.employersSearch(employersSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet(employmentVerificationGetRequest, options) {
            return localVarFp.employmentVerificationGet(employmentVerificationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(identityGetRequest, options) {
            return localVarFp.identityGet(identityGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate(incomeVerificationCreateRequest, options) {
            return localVarFp.incomeVerificationCreate(incomeVerificationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {
            return localVarFp.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {
            return localVarFp.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {
            return localVarFp.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/refresh` refreshes a given income verification.
         * @summary (Deprecated) Refresh an income verification
         * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationRefresh(incomeVerificationRefreshRequest, options) {
            return localVarFp.incomeVerificationRefresh(incomeVerificationRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet(requestBody, options) {
            return localVarFp.incomeVerificationTaxformsGet(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet(institutionsGetRequest, options) {
            return localVarFp.institutionsGet(institutionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById(institutionsGetByIdRequest, options) {
            return localVarFp.institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch(institutionsSearchRequest, options) {
            return localVarFp.institutionsSearch(institutionsSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {
            return localVarFp.investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {
            return localVarFp.investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {
            return localVarFp.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List a userâ€™s connected applications
         * @summary List a userâ€™s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList(itemApplicationListRequest, options) {
            return localVarFp.itemApplicationList(itemApplicationListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {
            return localVarFp.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken(itemPublicTokenCreateRequest, options) {
            return localVarFp.itemCreatePublicToken(itemPublicTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet(itemGetRequest, options) {
            return localVarFp.itemGet(itemGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport(itemImportRequest, options) {
            return localVarFp.itemImport(itemImportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {
            return localVarFp.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove(itemRemoveRequest, options) {
            return localVarFp.itemRemove(itemRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate(itemWebhookUpdateRequest, options) {
            return localVarFp.itemWebhookUpdate(itemWebhookUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet(liabilitiesGetRequest, options) {
            return localVarFp.liabilitiesGet(liabilitiesGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate(linkTokenCreateRequest, options) {
            return localVarFp.linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet(linkTokenGetRequest, options) {
            return localVarFp.linkTokenGet(linkTokenGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options) {
            return localVarFp.paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options) {
            return localVarFp.paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options) {
            return localVarFp.paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options) {
            return localVarFp.paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {
            return localVarFp.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {
            return localVarFp.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {
            return localVarFp.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\'s account.
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {
            return localVarFp.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {
            return localVarFp.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {
            return localVarFp.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {
            return localVarFp.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {
            return localVarFp.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet(processorAuthGetRequest, options) {
            return localVarFp.processorAuthGet(processorAuthGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet(processorBalanceGetRequest, options) {
            return localVarFp.processorBalanceGet(processorBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate(processorBankTransferCreateRequest, options) {
            return localVarFp.processorBankTransferCreate(processorBankTransferCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet(processorIdentityGetRequest, options) {
            return localVarFp.processorIdentityGet(processorIdentityGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/). Bank account tokens can also be revoked, using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {
            return localVarFp.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Processor tokens can also be revoked, using `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate(processorTokenCreateRequest, options) {
            return localVarFp.processorTokenCreate(processorTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {
            return localVarFp.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {
            return localVarFp.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {
            return localVarFp.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks: `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development\'
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {
            return localVarFp.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {
            return localVarFp.sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {
            return localVarFp.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {
            return localVarFp.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {
            return localVarFp.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {
            return localVarFp.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options) {
            return localVarFp.sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {
            return localVarFp.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {
            return localVarFp.sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {
            return localVarFp.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport(signalDecisionReportRequest, options) {
            return localVarFp.signalDecisionReport(signalDecisionReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate(signalEvaluateRequest, options) {
            return localVarFp.signalEvaluate(signalEvaluateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport(signalReturnReportRequest, options) {
            return localVarFp.signalReturnReport(signalReturnReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The \'/beta/transactions/v1/enhance\' endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance(transactionsEnhanceGetRequest, options) {
            return localVarFp.transactionsEnhance(transactionsEnhanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(transactionsGetRequest, options) {
            return localVarFp.transactionsGet(transactionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Get streams of recurring transactions
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet(transactionsRecurringGetRequest, options) {
            return localVarFp.transactionsRecurringGet(transactionsRecurringGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh(transactionsRefreshRequest, options) {
            return localVarFp.transactionsRefresh(transactionsRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/rules/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate(transactionsRulesCreateRequest, options) {
            return localVarFp.transactionsRulesCreate(transactionsRulesCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/rules/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList(transactionsRulesListRequest, options) {
            return localVarFp.transactionsRulesList(transactionsRulesListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/rules/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove(transactionsRulesRemoveRequest, options) {
            return localVarFp.transactionsRulesRemove(transactionsRulesRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync(transactionsSyncRequest, options) {
            return localVarFp.transactionsSync(transactionsSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {
            return localVarFp.transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel(transferCancelRequest, options) {
            return localVarFp.transferCancel(transferCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer.
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate(transferCreateRequest, options) {
            return localVarFp.transferCreate(transferCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList(transferEventListRequest, options) {
            return localVarFp.transferEventList(transferEventListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync(transferEventSyncRequest, options) {
            return localVarFp.transferEventSync(transferEventSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet(transferGetRequest, options) {
            return localVarFp.transferGet(transferGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate(transferIntentCreateRequest, options) {
            return localVarFp.transferIntentCreate(transferIntentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet(requestBody, options) {
            return localVarFp.transferIntentGet(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList(transferListRequest, options) {
            return localVarFp.transferList(transferListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount(transferMigrateAccountRequest, options) {
            return localVarFp.transferMigrateAccount(transferMigrateAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList(transferRepaymentListRequest, options) {
            return localVarFp.transferRepaymentList(transferRepaymentListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {
            return localVarFp.transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet(transferSweepGetRequest, options) {
            return localVarFp.transferSweepGet(transferSweepGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList(transferSweepListRequest, options) {
            return localVarFp.transferSweepList(transferSweepListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate(userCreateRequest, options) {
            return localVarFp.userCreate(userCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet(walletGetRequest, options) {
            return localVarFp.walletGet(walletGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute(walletTransactionExecuteRequest, options) {
            return localVarFp.walletTransactionExecute(walletTransactionExecuteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionsListRequest} walletTransactionsListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionsList(walletTransactionsListRequest, options) {
            return localVarFp.walletTransactionsList(walletTransactionsListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {
            return localVarFp.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlaidApiFactory = PlaidApiFactory;
/**
 * PlaidApi - object-oriented interface
 * @export
 * @class PlaidApi
 * @extends {BaseAPI}
 */
class PlaidApi extends base_1.BaseAPI {
    /**
     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.
     * @summary Retrieve real-time balance data
     * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    accountsBalanceGet(accountsBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
     * @summary Retrieve accounts
     * @param {AccountsGetRequest} accountsGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    accountsGet(accountsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).accountsGet(accountsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @summary Retrieve information about a Plaid application
     * @param {ApplicationGetRequest} applicationGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    applicationGet(applicationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).applicationGet(applicationGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @summary Create Asset Report Audit Copy
     * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
     * @summary Retrieve an Asset Report Audit Copy
     * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @summary Remove Asset Report Audit Copy
     * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
     * @summary Create an Asset Report
     * @param {AssetReportCreateRequest} assetReportCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportCreate(assetReportCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportCreate(assetReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     * @summary Filter Asset Report
     * @param {AssetReportFilterRequest} assetReportFilterRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportFilter(assetReportFilterRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportFilter(assetReportFilterRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
     * @summary Retrieve an Asset Report
     * @param {AssetReportGetRequest} assetReportGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportGet(assetReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportGet(assetReportGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @summary Retrieve a PDF Asset Report
     * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportPdfGet(assetReportPDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportPdfGet(assetReportPDFGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
     * @summary Refresh an Asset Report
     * @param {AssetReportRefreshRequest} assetReportRefreshRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportRefresh(assetReportRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportRefresh(assetReportRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant access to an Asset Report to a third party, use the `/asset_report/relay/create` endpoint to create an `asset_relay_token` and then pass that token to the third party who needs access. Each third party has its own `secondary_client_id`, for example `ce5bd328dcd34123456`. You\'ll need to create a separate `asset_relay_token` for each third party to whom you want to grant access to the Report.
     * @summary Create an `asset_relay_token` to share an Asset Report with a partner client
     * @param {AssetReportRelayCreateRequest} assetReportRelayCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportRelayCreate(assetReportRelayCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportRelayCreate(assetReportRelayCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/asset_report/relay/get` allows third parties to get an Asset Report that was shared with them, using an `asset_relay_token` that was created by the report owner.
     * @summary Retrieve an Asset Report that was shared with you
     * @param {AssetReportRelayGetRequest} assetReportRelayGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportRelayGet(assetReportRelayGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportRelayGet(assetReportRelayGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/asset_report/relay/refresh` endpoint allows third parties to refresh an Asset Report that was relayed to them, using an `asset_relay_token` that was created by the report owner. A new Asset Report will be created based on the old one, but with the most recent data available.
     * @summary Refresh a Relay Token\'s Asset Report
     * @param {AssetReportRelayRefreshRequest} assetReportRelayRefreshRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportRelayRefresh(assetReportRelayRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportRelayRefresh(assetReportRelayRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/asset_report/relay/remove` endpoint allows you to invalidate an `asset_relay_token`, meaning the third party holding the token will no longer be able to use it to access the Asset Report to which the `asset_relay_token` gives access to. The Asset Report, Items associated with it, and other Asset Relay Tokens that provide access to the same Asset Report are not affected and will remain accessible after removing the given `asset_relay_token.
     * @summary Remove Asset Report Relay Token
     * @param {AssetReportRelayRemoveRequest} assetReportRelayRemoveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportRelayRemove(assetReportRelayRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportRelayRemove(assetReportRelayRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
     * @summary Delete an Asset Report
     * @param {AssetReportRemoveRequest} assetReportRemoveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    assetReportRemove(assetReportRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportRemove(assetReportRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @summary Retrieve auth data
     * @param {AuthGetRequest} authGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    authGet(authGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).authGet(authGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @summary Get balance of your Bank Transfer account
     * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
     * @summary Cancel a bank transfer
     * @param {BankTransferCancelRequest} bankTransferCancelRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    bankTransferCancel(bankTransferCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferCancel(bankTransferCancelRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
     * @summary Create a bank transfer
     * @param {BankTransferCreateRequest} bankTransferCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    bankTransferCreate(bankTransferCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferCreate(bankTransferCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.
     * @summary List bank transfer events
     * @param {BankTransferEventListRequest} bankTransferEventListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    bankTransferEventList(bankTransferEventListRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferEventList(bankTransferEventListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.
     * @summary Sync bank transfer events
     * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    bankTransferEventSync(bankTransferEventSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferEventSync(bankTransferEventSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
     * @summary Retrieve a bank transfer
     * @param {BankTransferGetRequest} bankTransferGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    bankTransferGet(bankTransferGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferGet(bankTransferGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
     * @summary List bank transfers
     * @param {BankTransferListRequest} bankTransferListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    bankTransferList(bankTransferListRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferList(bankTransferListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @summary Migrate account into Bank Transfers
     * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
     * @summary Retrieve a sweep
     * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    bankTransferSweepGet(bankTransferSweepGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferSweepGet(bankTransferSweepGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
     * @summary List sweeps
     * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    bankTransferSweepList(bankTransferSweepListRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferSweepList(bankTransferSweepListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     * @summary Get Categories
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    categoriesGet(body, options) {
        return exports.PlaidApiFp(this.configuration).categoriesGet(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @summary Create payment token
     * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
     * @summary Retrieve information from the bank accounts used for income verification
     * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    creditBankIncomeGet(creditBankIncomeGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankIncomeGet(creditBankIncomeGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/credit/employment/get` returns a list of employments through a user payroll that was verified by an end user.
     * @summary Retrieve a summary of an individual\'s employment information
     * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    creditEmploymentGet(creditEmploymentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditEmploymentGet(creditEmploymentGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     * @summary Retrieve a user\'s payroll information
     * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.
     * @summary Check income verification eligibility and optimize conversion
     * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @summary Create a deposit switch without using Plaid Exchange
     * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @summary Create a deposit switch
     * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    depositSwitchCreate(depositSwitchCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchCreate(depositSwitchCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
     * @summary Retrieve a deposit switch
     * @param {DepositSwitchGetRequest} depositSwitchGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    depositSwitchGet(depositSwitchGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchGet(depositSwitchGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
     * @summary Create a deposit switch token
     * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @summary Search employer database
     * @param {EmployersSearchRequest} employersSearchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    employersSearch(employersSearchRequest, options) {
        return exports.PlaidApiFp(this.configuration).employersSearch(employersSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
     * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
     * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    employmentVerificationGet(employmentVerificationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).employmentVerificationGet(employmentVerificationGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     * @summary Retrieve identity data
     * @param {IdentityGetRequest} identityGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    identityGet(identityGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityGet(identityGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
     * @summary (Deprecated) Create an income verification instance
     * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    incomeVerificationCreate(incomeVerificationCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationCreate(incomeVerificationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
     * @summary (Deprecated) Download the original documents used for income verification
     * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     * @summary (Deprecated) Retrieve information from the paystubs used for income verification
     * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
     * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
     * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/income/verification/refresh` refreshes a given income verification.
     * @summary (Deprecated) Refresh an income verification
     * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    incomeVerificationRefresh(incomeVerificationRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationRefresh(incomeVerificationRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     * @summary (Deprecated) Retrieve information from the tax documents used for income verification
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    incomeVerificationTaxformsGet(requestBody, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationTaxformsGet(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @summary Get details of all supported institutions
     * @param {InstitutionsGetRequest} institutionsGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    institutionsGet(institutionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).institutionsGet(institutionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
     * @summary Get details of an institution
     * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    institutionsGetById(institutionsGetByIdRequest, options) {
        return exports.PlaidApiFp(this.configuration).institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
     * @summary Search institutions
     * @param {InstitutionsSearchRequest} institutionsSearchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    institutionsSearch(institutionsSearchRequest, options) {
        return exports.PlaidApiFp(this.configuration).institutionsSearch(institutionsSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
     * @summary Get Investment holdings
     * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
     * @summary Get investment transactions
     * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
     * @summary Invalidate access_token
     * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a userâ€™s connected applications
     * @summary List a userâ€™s connected applications
     * @param {ItemApplicationListRequest} itemApplicationListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    itemApplicationList(itemApplicationListRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemApplicationList(itemApplicationListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable consumers to update product access on selected accounts for an application.
     * @summary Update the scopes of access for a particular application
     * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @summary Create public token
     * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    itemCreatePublicToken(itemPublicTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemCreatePublicToken(itemPublicTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns information about the status of an Item.
     * @summary Retrieve an Item
     * @param {ItemGetRequest} itemGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    itemGet(itemGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemGet(itemGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).
     * @summary Import Item
     * @param {ItemImportRequest} itemImportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    itemImport(itemImportRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemImport(itemImportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
     * @summary Exchange public token for an access token
     * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
     * @summary Remove an Item
     * @param {ItemRemoveRequest} itemRemoveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    itemRemove(itemRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemRemove(itemRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     * @summary Update Webhook URL
     * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    itemWebhookUpdate(itemWebhookUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemWebhookUpdate(itemWebhookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @summary Retrieve Liabilities data
     * @param {LiabilitiesGetRequest} liabilitiesGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    liabilitiesGet(liabilitiesGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).liabilitiesGet(liabilitiesGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @summary Create Link Token
     * @param {LinkTokenCreateRequest} linkTokenCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    linkTokenCreate(linkTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
     * @summary Get Link Token
     * @param {LinkTokenGetRequest} linkTokenGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    linkTokenGet(linkTokenGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkTokenGet(linkTokenGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     * @summary Create payment consent
     * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     * @summary Get payment consent
     * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
     * @summary Execute a single payment using consent
     * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     * @summary Revoke payment consent
     * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
     * @summary Create a payment
     * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @summary Get payment details
     * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
     * @summary List payments
     * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\'s account.
     * @summary Reverse an existing payment
     * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
     * @summary Create payment recipient
     * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get details about a payment recipient you have previously created.
     * @summary Get payment recipient
     * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
     * @summary List payment recipients
     * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @summary Create Apex bank account token
     * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
     * @summary Retrieve Auth data
     * @param {ProcessorAuthGetRequest} processorAuthGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    processorAuthGet(processorAuthGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorAuthGet(processorAuthGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
     * @summary Retrieve Balance data
     * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    processorBalanceGet(processorBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorBalanceGet(processorBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
     * @summary Create a bank transfer as a processor
     * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    processorBankTransferCreate(processorBankTransferCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorBankTransferCreate(processorBankTransferCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @summary Retrieve Identity data
     * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    processorIdentityGet(processorIdentityGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorIdentityGet(processorIdentityGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/). Bank account tokens can also be revoked, using `/item/remove`.
     * @summary Create Stripe bank account token
     * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Processor tokens can also be revoked, using `/item/remove`.
     * @summary Create processor token
     * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    processorTokenCreate(processorTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTokenCreate(processorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @summary Manually fire a Bank Transfer webhook
     * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @summary Simulate a bank transfer event in Sandbox
     * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.
     * @summary Manually fire an Income webhook
     * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks: `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development\'
     * @summary Fire a test webhook
     * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
     * @summary Force a Sandbox Item into an error state
     * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @summary Set verification status for Sandbox account
     * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @summary Save the selected accounts when connecting to the Platypus Oauth institution
     * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @summary Create a test Item and processor token
     * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
     * @summary Create a test Item
     * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment.
     * @summary Manually fire a Transfer webhook
     * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @summary Trigger the creation of a repayment
     * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @summary Simulate a transfer event in Sandbox
     * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.
     * @summary Simulate creating a sweep
     * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.
     * @summary Report whether you initiated an ACH transaction
     * @param {SignalDecisionReportRequest} signalDecisionReportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    signalDecisionReport(signalDecisionReportRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalDecisionReport(signalDecisionReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
     * @summary Evaluate a planned ACH transaction
     * @param {SignalEvaluateRequest} signalEvaluateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    signalEvaluate(signalEvaluateRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalEvaluate(signalEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @summary Report a return for an ACH transaction
     * @param {SignalReturnReportRequest} signalReturnReportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    signalReturnReport(signalReturnReportRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalReturnReport(signalReturnReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The \'/beta/transactions/v1/enhance\' endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
     * @summary enhance locally-held transaction data
     * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transactionsEnhance(transactionsEnhanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsEnhance(transactionsEnhanceGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     * @summary Get transaction data
     * @param {TransactionsGetRequest} transactionsGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transactionsGet(transactionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsGet(transactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @summary Get streams of recurring transactions
     * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transactionsRecurringGet(transactionsRecurringGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRecurringGet(transactionsRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
     * @summary Refresh transaction data
     * @param {TransactionsRefreshRequest} transactionsRefreshRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transactionsRefresh(transactionsRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRefresh(transactionsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transactions/rules/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @summary Create transaction category rule
     * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transactionsRulesCreate(transactionsRulesCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRulesCreate(transactionsRulesCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transactions/rules/list` returns a list of transaction rules created for the Item associated with the access token.
     * @summary Return a list of rules created for the Item associated with the access token.
     * @param {TransactionsRulesListRequest} transactionsRulesListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transactionsRulesList(transactionsRulesListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRulesList(transactionsRulesListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transactions/rules/remove` endpoint is used to remove a transaction rule.
     * @summary Remove transaction rule
     * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transactionsRulesRemove(transactionsRulesRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRulesRemove(transactionsRulesRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @summary Get incremental transaction updates on an Item
     * @param {TransactionsSyncRequest} transactionsSyncRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transactionsSync(transactionsSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsSync(transactionsSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
     * @summary Create a transfer authorization
     * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.
     * @summary Cancel a transfer
     * @param {TransferCancelRequest} transferCancelRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferCancel(transferCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferCancel(transferCancelRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/transfer/create` endpoint to initiate a new transfer.
     * @summary Create a transfer
     * @param {TransferCreateRequest} transferCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferCreate(transferCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferCreate(transferCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
     * @summary List transfer events
     * @param {TransferEventListRequest} transferEventListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferEventList(transferEventListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferEventList(transferEventListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
     * @summary Sync transfer events
     * @param {TransferEventSyncRequest} transferEventSyncRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferEventSync(transferEventSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferEventSync(transferEventSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.
     * @summary Retrieve a transfer
     * @param {TransferGetRequest} transferGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferGet(transferGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferGet(transferGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @summary Create a transfer intent object to invoke the Transfer UI
     * @param {TransferIntentCreateRequest} transferIntentCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferIntentCreate(transferIntentCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferIntentCreate(transferIntentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
     * @summary Retrieve more information about a transfer intent
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferIntentGet(requestBody, options) {
        return exports.PlaidApiFp(this.configuration).transferIntentGet(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
     * @summary List transfers
     * @param {TransferListRequest} transferListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferList(transferListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferList(transferListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @summary Migrate account into Transfers
     * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferMigrateAccount(transferMigrateAccountRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferMigrateAccount(transferMigrateAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
     * @summary Lists historical repayments
     * @param {TransferRepaymentListRequest} transferRepaymentListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferRepaymentList(transferRepaymentListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRepaymentList(transferRepaymentListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @summary List the returns included in a repayment
     * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
     * @summary Retrieve a sweep
     * @param {TransferSweepGetRequest} transferSweepGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferSweepGet(transferSweepGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferSweepGet(transferSweepGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
     * @summary List sweeps
     * @param {TransferSweepListRequest} transferSweepListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    transferSweepList(transferSweepListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferSweepList(transferSweepListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.
     * @summary Create user
     * @param {UserCreateRequest} userCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    userCreate(userCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).userCreate(userCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch an e-wallet. The response includes the current balance.
     * @summary Fetch an e-wallet
     * @param {WalletGetRequest} walletGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    walletGet(walletGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletGet(walletGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds.
     * @summary Execute a transaction using an e-wallet
     * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    walletTransactionExecute(walletTransactionExecuteRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletTransactionExecute(walletTransactionExecuteRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
     * @summary List e-wallet transactions
     * @param {WalletTransactionsListRequest} walletTransactionsListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    walletTransactionsList(walletTransactionsListRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletTransactionsList(walletTransactionsListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @summary Get webhook verification key
     * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlaidApi = PlaidApi;
//# sourceMappingURL=data:application/json;base64,